#region License
/*
The MIT License

Copyright (c) 2008 Sky Morey

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
#endregion
using System.IO;
namespace System.Interop.Cuda
{
    using z = PtxOpCode;
    public partial class PtxEmitter
    {
        internal static void EmitComparisonSelectInstruction(TextWriter w, PtxInstruction instruction)
        {
            string text;
            var opCode = instruction.OpCode;
            switch (opCode)
            {
                // set
                case z.set_eq_b32_b16: text = "set.eq.b32.b16"; break;
                case z.set_eq_b32_u16: text = "set.eq.b32.u16"; break;
                case z.set_eq_b32_s16: text = "set.eq.b32.s16"; break;
                case z.set_ne_b32_b16: text = "set.ne.b32.b16"; break;
                case z.set_ne_b32_u16: text = "set.ne.b32.u16"; break;
                case z.set_ne_b32_s16: text = "set.ne.b32.s16"; break;
                case z.set_lt_b32_u16: text = "set.lt.b32.u16"; break;
                case z.set_lt_b32_s16: text = "set.lt.b32.s16"; break;
                case z.set_le_b32_u16: text = "set.le.b32.u16"; break;
                case z.set_le_b32_s16: text = "set.le.b32.s16"; break;
                case z.set_gt_b32_u16: text = "set.gt.b32.u16"; break;
                case z.set_gt_b32_s16: text = "set.gt.b32.s16"; break;
                case z.set_ge_b32_u16: text = "set.ge.b32.u16"; break;
                case z.set_ge_b32_s16: text = "set.ge.b32.s16"; break;
                case z.set_eq_and_b32_b16: text = "set.eq.and.b32.b16"; break;
                case z.set_eq_and_b32_u16: text = "set.eq.and.b32.u16"; break;
                case z.set_eq_and_b32_s16: text = "set.eq.and.b32.s16"; break;
                case z.set_ne_and_b32_b16: text = "set.ne.and.b32.b16"; break;
                case z.set_ne_and_b32_u16: text = "set.ne.and.b32.u16"; break;
                case z.set_ne_and_b32_s16: text = "set.ne.and.b32.s16"; break;
                case z.set_lt_and_b32_u16: text = "set.lt.and.b32.u16"; break;
                case z.set_lt_and_b32_s16: text = "set.lt.and.b32.s16"; break;
                case z.set_le_and_b32_u16: text = "set.le.and.b32.u16"; break;
                case z.set_le_and_b32_s16: text = "set.le.and.b32.s16"; break;
                case z.set_gt_and_b32_u16: text = "set.gt.and.b32.u16"; break;
                case z.set_gt_and_b32_s16: text = "set.gt.and.b32.s16"; break;
                case z.set_ge_and_b32_u16: text = "set.ge.and.b32.u16"; break;
                case z.set_ge_and_b32_s16: text = "set.ge.and.b32.s16"; break;
                case z.set_eq_or_b32_b16: text = "set.eq.or.b32.b16"; break;
                case z.set_eq_or_b32_u16: text = "set.eq.or.b32.u16"; break;
                case z.set_eq_or_b32_s16: text = "set.eq.or.b32.s16"; break;
                case z.set_ne_or_b32_b16: text = "set.ne.or.b32.b16"; break;
                case z.set_ne_or_b32_u16: text = "set.ne.or.b32.u16"; break;
                case z.set_ne_or_b32_s16: text = "set.ne.or.b32.s16"; break;
                case z.set_lt_or_b32_u16: text = "set.lt.or.b32.u16"; break;
                case z.set_lt_or_b32_s16: text = "set.lt.or.b32.s16"; break;
                case z.set_le_or_b32_u16: text = "set.le.or.b32.u16"; break;
                case z.set_le_or_b32_s16: text = "set.le.or.b32.s16"; break;
                case z.set_gt_or_b32_u16: text = "set.gt.or.b32.u16"; break;
                case z.set_gt_or_b32_s16: text = "set.gt.or.b32.s16"; break;
                case z.set_ge_or_b32_u16: text = "set.ge.or.b32.u16"; break;
                case z.set_ge_or_b32_s16: text = "set.ge.or.b32.s16"; break;
                case z.set_eq_xor_b32_b16: text = "set.eq.xor.b32.b16"; break;
                case z.set_eq_xor_b32_u16: text = "set.eq.xor.b32.u16"; break;
                case z.set_eq_xor_b32_s16: text = "set.eq.xor.b32.s16"; break;
                case z.set_ne_xor_b32_b16: text = "set.ne.xor.b32.b16"; break;
                case z.set_ne_xor_b32_u16: text = "set.ne.xor.b32.u16"; break;
                case z.set_ne_xor_b32_s16: text = "set.ne.xor.b32.s16"; break;
                case z.set_lt_xor_b32_u16: text = "set.lt.xor.b32.u16"; break;
                case z.set_lt_xor_b32_s16: text = "set.lt.xor.b32.s16"; break;
                case z.set_le_xor_b32_u16: text = "set.le.xor.b32.u16"; break;
                case z.set_le_xor_b32_s16: text = "set.le.xor.b32.s16"; break;
                case z.set_gt_xor_b32_u16: text = "set.gt.xor.b32.u16"; break;
                case z.set_gt_xor_b32_s16: text = "set.gt.xor.b32.s16"; break;
                case z.set_ge_xor_b32_u16: text = "set.ge.xor.b32.u16"; break;
                case z.set_ge_xor_b32_s16: text = "set.ge.xor.b32.s16"; break;
                case z.set_eq_b32_b32: text = "set.eq.b32.b32"; break;
                case z.set_eq_b32_u32: text = "set.eq.b32.u32"; break;
                case z.set_eq_b32_s32: text = "set.eq.b32.s32"; break;
                case z.set_eq_b32_f32: text = "set.eq.b32.f32"; break;
                case z.set_ne_b32_b32: text = "set.ne.b32.b32"; break;
                case z.set_ne_b32_u32: text = "set.ne.b32.u32"; break;
                case z.set_ne_b32_s32: text = "set.ne.b32.s32"; break;
                case z.set_ne_b32_f32: text = "set.ne.b32.f32"; break;
                case z.set_lt_b32_u32: text = "set.lt.b32.u32"; break;
                case z.set_lt_b32_s32: text = "set.lt.b32.s32"; break;
                case z.set_lt_b32_f32: text = "set.lt.b32.f32"; break;
                case z.set_le_b32_u32: text = "set.le.b32.u32"; break;
                case z.set_le_b32_s32: text = "set.le.b32.s32"; break;
                case z.set_le_b32_f32: text = "set.le.b32.f32"; break;
                case z.set_gt_b32_u32: text = "set.gt.b32.u32"; break;
                case z.set_gt_b32_s32: text = "set.gt.b32.s32"; break;
                case z.set_gt_b32_f32: text = "set.gt.b32.f32"; break;
                case z.set_ge_b32_u32: text = "set.ge.b32.u32"; break;
                case z.set_ge_b32_s32: text = "set.ge.b32.s32"; break;
                case z.set_ge_b32_f32: text = "set.ge.b32.f32"; break;
                case z.set_eq_and_b32_b32: text = "set.eq.and.b32.b32"; break;
                case z.set_eq_and_b32_u32: text = "set.eq.and.b32.u32"; break;
                case z.set_eq_and_b32_s32: text = "set.eq.and.b32.s32"; break;
                case z.set_eq_and_b32_f32: text = "set.eq.and.b32.f32"; break;
                case z.set_ne_and_b32_b32: text = "set.ne.and.b32.b32"; break;
                case z.set_ne_and_b32_u32: text = "set.ne.and.b32.u32"; break;
                case z.set_ne_and_b32_s32: text = "set.ne.and.b32.s32"; break;
                case z.set_ne_and_b32_f32: text = "set.ne.and.b32.f32"; break;
                case z.set_lt_and_b32_u32: text = "set.lt.and.b32.u32"; break;
                case z.set_lt_and_b32_s32: text = "set.lt.and.b32.s32"; break;
                case z.set_lt_and_b32_f32: text = "set.lt.and.b32.f32"; break;
                case z.set_le_and_b32_u32: text = "set.le.and.b32.u32"; break;
                case z.set_le_and_b32_s32: text = "set.le.and.b32.s32"; break;
                case z.set_le_and_b32_f32: text = "set.le.and.b32.f32"; break;
                case z.set_gt_and_b32_u32: text = "set.gt.and.b32.u32"; break;
                case z.set_gt_and_b32_s32: text = "set.gt.and.b32.s32"; break;
                case z.set_gt_and_b32_f32: text = "set.gt.and.b32.f32"; break;
                case z.set_ge_and_b32_u32: text = "set.ge.and.b32.u32"; break;
                case z.set_ge_and_b32_s32: text = "set.ge.and.b32.s32"; break;
                case z.set_ge_and_b32_f32: text = "set.ge.and.b32.f32"; break;
                case z.set_eq_or_b32_b32: text = "set.eq.or.b32.b32"; break;
                case z.set_eq_or_b32_u32: text = "set.eq.or.b32.u32"; break;
                case z.set_eq_or_b32_s32: text = "set.eq.or.b32.s32"; break;
                case z.set_eq_or_b32_f32: text = "set.eq.or.b32.f32"; break;
                case z.set_ne_or_b32_b32: text = "set.ne.or.b32.b32"; break;
                case z.set_ne_or_b32_u32: text = "set.ne.or.b32.u32"; break;
                case z.set_ne_or_b32_s32: text = "set.ne.or.b32.s32"; break;
                case z.set_ne_or_b32_f32: text = "set.ne.or.b32.f32"; break;
                case z.set_lt_or_b32_u32: text = "set.lt.or.b32.u32"; break;
                case z.set_lt_or_b32_s32: text = "set.lt.or.b32.s32"; break;
                case z.set_lt_or_b32_f32: text = "set.lt.or.b32.f32"; break;
                case z.set_le_or_b32_u32: text = "set.le.or.b32.u32"; break;
                case z.set_le_or_b32_s32: text = "set.le.or.b32.s32"; break;
                case z.set_le_or_b32_f32: text = "set.le.or.b32.f32"; break;
                case z.set_gt_or_b32_u32: text = "set.gt.or.b32.u32"; break;
                case z.set_gt_or_b32_s32: text = "set.gt.or.b32.s32"; break;
                case z.set_gt_or_b32_f32: text = "set.gt.or.b32.f32"; break;
                case z.set_ge_or_b32_u32: text = "set.ge.or.b32.u32"; break;
                case z.set_ge_or_b32_s32: text = "set.ge.or.b32.s32"; break;
                case z.set_ge_or_b32_f32: text = "set.ge.or.b32.f32"; break;
                case z.set_eq_xor_b32_b32: text = "set.eq.xor.b32.b32"; break;
                case z.set_eq_xor_b32_u32: text = "set.eq.xor.b32.u32"; break;
                case z.set_eq_xor_b32_s32: text = "set.eq.xor.b32.s32"; break;
                case z.set_eq_xor_b32_f32: text = "set.eq.xor.b32.f32"; break;
                case z.set_ne_xor_b32_b32: text = "set.ne.xor.b32.b32"; break;
                case z.set_ne_xor_b32_u32: text = "set.ne.xor.b32.u32"; break;
                case z.set_ne_xor_b32_s32: text = "set.ne.xor.b32.s32"; break;
                case z.set_ne_xor_b32_f32: text = "set.ne.xor.b32.f32"; break;
                case z.set_lt_xor_b32_u32: text = "set.lt.xor.b32.u32"; break;
                case z.set_lt_xor_b32_s32: text = "set.lt.xor.b32.s32"; break;
                case z.set_lt_xor_b32_f32: text = "set.lt.xor.b32.f32"; break;
                case z.set_le_xor_b32_u32: text = "set.le.xor.b32.u32"; break;
                case z.set_le_xor_b32_s32: text = "set.le.xor.b32.s32"; break;
                case z.set_le_xor_b32_f32: text = "set.le.xor.b32.f32"; break;
                case z.set_gt_xor_b32_u32: text = "set.gt.xor.b32.u32"; break;
                case z.set_gt_xor_b32_s32: text = "set.gt.xor.b32.s32"; break;
                case z.set_gt_xor_b32_f32: text = "set.gt.xor.b32.f32"; break;
                case z.set_ge_xor_b32_u32: text = "set.ge.xor.b32.u32"; break;
                case z.set_ge_xor_b32_s32: text = "set.ge.xor.b32.s32"; break;
                case z.set_ge_xor_b32_f32: text = "set.ge.xor.b32.f32"; break;
                case z.set_eq_b32_b64: text = "set.eq.b32.b64"; break;
                case z.set_eq_b32_u64: text = "set.eq.b32.u64"; break;
                case z.set_eq_b32_s64: text = "set.eq.b32.s64"; break;
                case z.set_eq_b32_f64: text = "set.eq.b32.f64"; break;
                case z.set_ne_b32_b64: text = "set.ne.b32.b64"; break;
                case z.set_ne_b32_u64: text = "set.ne.b32.u64"; break;
                case z.set_ne_b32_s64: text = "set.ne.b32.s64"; break;
                case z.set_ne_b32_f64: text = "set.ne.b32.f64"; break;
                case z.set_lt_b32_u64: text = "set.lt.b32.u64"; break;
                case z.set_lt_b32_s64: text = "set.lt.b32.s64"; break;
                case z.set_lt_b32_f64: text = "set.lt.b32.f64"; break;
                case z.set_le_b32_u64: text = "set.le.b32.u64"; break;
                case z.set_le_b32_s64: text = "set.le.b32.s64"; break;
                case z.set_le_b32_f64: text = "set.le.b32.f64"; break;
                case z.set_gt_b32_u64: text = "set.gt.b32.u64"; break;
                case z.set_gt_b32_s64: text = "set.gt.b32.s64"; break;
                case z.set_gt_b32_f64: text = "set.gt.b32.f64"; break;
                case z.set_ge_b32_u64: text = "set.ge.b32.u64"; break;
                case z.set_ge_b32_s64: text = "set.ge.b32.s64"; break;
                case z.set_ge_b32_f64: text = "set.ge.b32.f64"; break;
                case z.set_eq_and_b32_b64: text = "set.eq.and.b32.b64"; break;
                case z.set_eq_and_b32_u64: text = "set.eq.and.b32.u64"; break;
                case z.set_eq_and_b32_s64: text = "set.eq.and.b32.s64"; break;
                case z.set_eq_and_b32_f64: text = "set.eq.and.b32.f64"; break;
                case z.set_ne_and_b32_b64: text = "set.ne.and.b32.b64"; break;
                case z.set_ne_and_b32_u64: text = "set.ne.and.b32.u64"; break;
                case z.set_ne_and_b32_s64: text = "set.ne.and.b32.s64"; break;
                case z.set_ne_and_b32_f64: text = "set.ne.and.b32.f64"; break;
                case z.set_lt_and_b32_u64: text = "set.lt.and.b32.u64"; break;
                case z.set_lt_and_b32_s64: text = "set.lt.and.b32.s64"; break;
                case z.set_lt_and_b32_f64: text = "set.lt.and.b32.f64"; break;
                case z.set_le_and_b32_u64: text = "set.le.and.b32.u64"; break;
                case z.set_le_and_b32_s64: text = "set.le.and.b32.s64"; break;
                case z.set_le_and_b32_f64: text = "set.le.and.b32.f64"; break;
                case z.set_gt_and_b32_u64: text = "set.gt.and.b32.u64"; break;
                case z.set_gt_and_b32_s64: text = "set.gt.and.b32.s64"; break;
                case z.set_gt_and_b32_f64: text = "set.gt.and.b32.f64"; break;
                case z.set_ge_and_b32_u64: text = "set.ge.and.b32.u64"; break;
                case z.set_ge_and_b32_s64: text = "set.ge.and.b32.s64"; break;
                case z.set_ge_and_b32_f64: text = "set.ge.and.b32.f64"; break;
                case z.set_eq_or_b32_b64: text = "set.eq.or.b32.b64"; break;
                case z.set_eq_or_b32_u64: text = "set.eq.or.b32.u64"; break;
                case z.set_eq_or_b32_s64: text = "set.eq.or.b32.s64"; break;
                case z.set_eq_or_b32_f64: text = "set.eq.or.b32.f64"; break;
                case z.set_ne_or_b32_b64: text = "set.ne.or.b32.b64"; break;
                case z.set_ne_or_b32_u64: text = "set.ne.or.b32.u64"; break;
                case z.set_ne_or_b32_s64: text = "set.ne.or.b32.s64"; break;
                case z.set_ne_or_b32_f64: text = "set.ne.or.b32.f64"; break;
                case z.set_lt_or_b32_u64: text = "set.lt.or.b32.u64"; break;
                case z.set_lt_or_b32_s64: text = "set.lt.or.b32.s64"; break;
                case z.set_lt_or_b32_f64: text = "set.lt.or.b32.f64"; break;
                case z.set_le_or_b32_u64: text = "set.le.or.b32.u64"; break;
                case z.set_le_or_b32_s64: text = "set.le.or.b32.s64"; break;
                case z.set_le_or_b32_f64: text = "set.le.or.b32.f64"; break;
                case z.set_gt_or_b32_u64: text = "set.gt.or.b32.u64"; break;
                case z.set_gt_or_b32_s64: text = "set.gt.or.b32.s64"; break;
                case z.set_gt_or_b32_f64: text = "set.gt.or.b32.f64"; break;
                case z.set_ge_or_b32_u64: text = "set.ge.or.b32.u64"; break;
                case z.set_ge_or_b32_s64: text = "set.ge.or.b32.s64"; break;
                case z.set_ge_or_b32_f64: text = "set.ge.or.b32.f64"; break;
                case z.set_eq_xor_b32_b64: text = "set.eq.xor.b32.b64"; break;
                case z.set_eq_xor_b32_u64: text = "set.eq.xor.b32.u64"; break;
                case z.set_eq_xor_b32_s64: text = "set.eq.xor.b32.s64"; break;
                case z.set_eq_xor_b32_f64: text = "set.eq.xor.b32.f64"; break;
                case z.set_ne_xor_b32_b64: text = "set.ne.xor.b32.b64"; break;
                case z.set_ne_xor_b32_u64: text = "set.ne.xor.b32.u64"; break;
                case z.set_ne_xor_b32_s64: text = "set.ne.xor.b32.s64"; break;
                case z.set_ne_xor_b32_f64: text = "set.ne.xor.b32.f64"; break;
                case z.set_lt_xor_b32_u64: text = "set.lt.xor.b32.u64"; break;
                case z.set_lt_xor_b32_s64: text = "set.lt.xor.b32.s64"; break;
                case z.set_lt_xor_b32_f64: text = "set.lt.xor.b32.f64"; break;
                case z.set_le_xor_b32_u64: text = "set.le.xor.b32.u64"; break;
                case z.set_le_xor_b32_s64: text = "set.le.xor.b32.s64"; break;
                case z.set_le_xor_b32_f64: text = "set.le.xor.b32.f64"; break;
                case z.set_gt_xor_b32_u64: text = "set.gt.xor.b32.u64"; break;
                case z.set_gt_xor_b32_s64: text = "set.gt.xor.b32.s64"; break;
                case z.set_gt_xor_b32_f64: text = "set.gt.xor.b32.f64"; break;
                case z.set_ge_xor_b32_u64: text = "set.ge.xor.b32.u64"; break;
                case z.set_ge_xor_b32_s64: text = "set.ge.xor.b32.s64"; break;
                case z.set_ge_xor_b32_f64: text = "set.ge.xor.b32.f64"; break;
                //
                case z.set_eq_u32_b16: text = "set.eq.u32.b16"; break;
                case z.set_eq_u32_u16: text = "set.eq.u32.u16"; break;
                case z.set_eq_u32_s16: text = "set.eq.u32.s16"; break;
                case z.set_ne_u32_b16: text = "set.ne.u32.b16"; break;
                case z.set_ne_u32_u16: text = "set.ne.u32.u16"; break;
                case z.set_ne_u32_s16: text = "set.ne.u32.s16"; break;
                case z.set_lt_u32_u16: text = "set.lt.u32.u16"; break;
                case z.set_lt_u32_s16: text = "set.lt.u32.s16"; break;
                case z.set_le_u32_u16: text = "set.le.u32.u16"; break;
                case z.set_le_u32_s16: text = "set.le.u32.s16"; break;
                case z.set_gt_u32_u16: text = "set.gt.u32.u16"; break;
                case z.set_gt_u32_s16: text = "set.gt.u32.s16"; break;
                case z.set_ge_u32_u16: text = "set.ge.u32.u16"; break;
                case z.set_ge_u32_s16: text = "set.ge.u32.s16"; break;
                case z.set_eq_and_u32_b16: text = "set.eq.and.u32.b16"; break;
                case z.set_eq_and_u32_u16: text = "set.eq.and.u32.u16"; break;
                case z.set_eq_and_u32_s16: text = "set.eq.and.u32.s16"; break;
                case z.set_ne_and_u32_b16: text = "set.ne.and.u32.b16"; break;
                case z.set_ne_and_u32_u16: text = "set.ne.and.u32.u16"; break;
                case z.set_ne_and_u32_s16: text = "set.ne.and.u32.s16"; break;
                case z.set_lt_and_u32_u16: text = "set.lt.and.u32.u16"; break;
                case z.set_lt_and_u32_s16: text = "set.lt.and.u32.s16"; break;
                case z.set_le_and_u32_u16: text = "set.le.and.u32.u16"; break;
                case z.set_le_and_u32_s16: text = "set.le.and.u32.s16"; break;
                case z.set_gt_and_u32_u16: text = "set.gt.and.u32.u16"; break;
                case z.set_gt_and_u32_s16: text = "set.gt.and.u32.s16"; break;
                case z.set_ge_and_u32_u16: text = "set.ge.and.u32.u16"; break;
                case z.set_ge_and_u32_s16: text = "set.ge.and.u32.s16"; break;
                case z.set_eq_or_u32_b16: text = "set.eq.or.u32.b16"; break;
                case z.set_eq_or_u32_u16: text = "set.eq.or.u32.u16"; break;
                case z.set_eq_or_u32_s16: text = "set.eq.or.u32.s16"; break;
                case z.set_ne_or_u32_b16: text = "set.ne.or.u32.b16"; break;
                case z.set_ne_or_u32_u16: text = "set.ne.or.u32.u16"; break;
                case z.set_ne_or_u32_s16: text = "set.ne.or.u32.s16"; break;
                case z.set_lt_or_u32_u16: text = "set.lt.or.u32.u16"; break;
                case z.set_lt_or_u32_s16: text = "set.lt.or.u32.s16"; break;
                case z.set_le_or_u32_u16: text = "set.le.or.u32.u16"; break;
                case z.set_le_or_u32_s16: text = "set.le.or.u32.s16"; break;
                case z.set_gt_or_u32_u16: text = "set.gt.or.u32.u16"; break;
                case z.set_gt_or_u32_s16: text = "set.gt.or.u32.s16"; break;
                case z.set_ge_or_u32_u16: text = "set.ge.or.u32.u16"; break;
                case z.set_ge_or_u32_s16: text = "set.ge.or.u32.s16"; break;
                case z.set_eq_xor_u32_b16: text = "set.eq.xor.u32.b16"; break;
                case z.set_eq_xor_u32_u16: text = "set.eq.xor.u32.u16"; break;
                case z.set_eq_xor_u32_s16: text = "set.eq.xor.u32.s16"; break;
                case z.set_ne_xor_u32_b16: text = "set.ne.xor.u32.b16"; break;
                case z.set_ne_xor_u32_u16: text = "set.ne.xor.u32.u16"; break;
                case z.set_ne_xor_u32_s16: text = "set.ne.xor.u32.s16"; break;
                case z.set_lt_xor_u32_u16: text = "set.lt.xor.u32.u16"; break;
                case z.set_lt_xor_u32_s16: text = "set.lt.xor.u32.s16"; break;
                case z.set_le_xor_u32_u16: text = "set.le.xor.u32.u16"; break;
                case z.set_le_xor_u32_s16: text = "set.le.xor.u32.s16"; break;
                case z.set_gt_xor_u32_u16: text = "set.gt.xor.u32.u16"; break;
                case z.set_gt_xor_u32_s16: text = "set.gt.xor.u32.s16"; break;
                case z.set_ge_xor_u32_u16: text = "set.ge.xor.u32.u16"; break;
                case z.set_ge_xor_u32_s16: text = "set.ge.xor.u32.s16"; break;
                case z.set_eq_u32_b32: text = "set.eq.u32.b32"; break;
                case z.set_eq_u32_u32: text = "set.eq.u32.u32"; break;
                case z.set_eq_u32_s32: text = "set.eq.u32.s32"; break;
                case z.set_eq_u32_f32: text = "set.eq.u32.f32"; break;
                case z.set_ne_u32_b32: text = "set.ne.u32.b32"; break;
                case z.set_ne_u32_u32: text = "set.ne.u32.u32"; break;
                case z.set_ne_u32_s32: text = "set.ne.u32.s32"; break;
                case z.set_ne_u32_f32: text = "set.ne.u32.f32"; break;
                case z.set_lt_u32_u32: text = "set.lt.u32.u32"; break;
                case z.set_lt_u32_s32: text = "set.lt.u32.s32"; break;
                case z.set_lt_u32_f32: text = "set.lt.u32.f32"; break;
                case z.set_le_u32_u32: text = "set.le.u32.u32"; break;
                case z.set_le_u32_s32: text = "set.le.u32.s32"; break;
                case z.set_le_u32_f32: text = "set.le.u32.f32"; break;
                case z.set_gt_u32_u32: text = "set.gt.u32.u32"; break;
                case z.set_gt_u32_s32: text = "set.gt.u32.s32"; break;
                case z.set_gt_u32_f32: text = "set.gt.u32.f32"; break;
                case z.set_ge_u32_u32: text = "set.ge.u32.u32"; break;
                case z.set_ge_u32_s32: text = "set.ge.u32.s32"; break;
                case z.set_ge_u32_f32: text = "set.ge.u32.f32"; break;
                case z.set_eq_and_u32_b32: text = "set.eq.and.u32.b32"; break;
                case z.set_eq_and_u32_u32: text = "set.eq.and.u32.u32"; break;
                case z.set_eq_and_u32_s32: text = "set.eq.and.u32.s32"; break;
                case z.set_eq_and_u32_f32: text = "set.eq.and.u32.f32"; break;
                case z.set_ne_and_u32_b32: text = "set.ne.and.u32.b32"; break;
                case z.set_ne_and_u32_u32: text = "set.ne.and.u32.u32"; break;
                case z.set_ne_and_u32_s32: text = "set.ne.and.u32.s32"; break;
                case z.set_ne_and_u32_f32: text = "set.ne.and.u32.f32"; break;
                case z.set_lt_and_u32_u32: text = "set.lt.and.u32.u32"; break;
                case z.set_lt_and_u32_s32: text = "set.lt.and.u32.s32"; break;
                case z.set_lt_and_u32_f32: text = "set.lt.and.u32.f32"; break;
                case z.set_le_and_u32_u32: text = "set.le.and.u32.u32"; break;
                case z.set_le_and_u32_s32: text = "set.le.and.u32.s32"; break;
                case z.set_le_and_u32_f32: text = "set.le.and.u32.f32"; break;
                case z.set_gt_and_u32_u32: text = "set.gt.and.u32.u32"; break;
                case z.set_gt_and_u32_s32: text = "set.gt.and.u32.s32"; break;
                case z.set_gt_and_u32_f32: text = "set.gt.and.u32.f32"; break;
                case z.set_ge_and_u32_u32: text = "set.ge.and.u32.u32"; break;
                case z.set_ge_and_u32_s32: text = "set.ge.and.u32.s32"; break;
                case z.set_ge_and_u32_f32: text = "set.ge.and.u32.f32"; break;
                case z.set_eq_or_u32_b32: text = "set.eq.or.u32.b32"; break;
                case z.set_eq_or_u32_u32: text = "set.eq.or.u32.u32"; break;
                case z.set_eq_or_u32_s32: text = "set.eq.or.u32.s32"; break;
                case z.set_eq_or_u32_f32: text = "set.eq.or.u32.f32"; break;
                case z.set_ne_or_u32_b32: text = "set.ne.or.u32.b32"; break;
                case z.set_ne_or_u32_u32: text = "set.ne.or.u32.u32"; break;
                case z.set_ne_or_u32_s32: text = "set.ne.or.u32.s32"; break;
                case z.set_ne_or_u32_f32: text = "set.ne.or.u32.f32"; break;
                case z.set_lt_or_u32_u32: text = "set.lt.or.u32.u32"; break;
                case z.set_lt_or_u32_s32: text = "set.lt.or.u32.s32"; break;
                case z.set_lt_or_u32_f32: text = "set.lt.or.u32.f32"; break;
                case z.set_le_or_u32_u32: text = "set.le.or.u32.u32"; break;
                case z.set_le_or_u32_s32: text = "set.le.or.u32.s32"; break;
                case z.set_le_or_u32_f32: text = "set.le.or.u32.f32"; break;
                case z.set_gt_or_u32_u32: text = "set.gt.or.u32.u32"; break;
                case z.set_gt_or_u32_s32: text = "set.gt.or.u32.s32"; break;
                case z.set_gt_or_u32_f32: text = "set.gt.or.u32.f32"; break;
                case z.set_ge_or_u32_u32: text = "set.ge.or.u32.u32"; break;
                case z.set_ge_or_u32_s32: text = "set.ge.or.u32.s32"; break;
                case z.set_ge_or_u32_f32: text = "set.ge.or.u32.f32"; break;
                case z.set_eq_xor_u32_b32: text = "set.eq.xor.u32.b32"; break;
                case z.set_eq_xor_u32_u32: text = "set.eq.xor.u32.u32"; break;
                case z.set_eq_xor_u32_s32: text = "set.eq.xor.u32.s32"; break;
                case z.set_eq_xor_u32_f32: text = "set.eq.xor.u32.f32"; break;
                case z.set_ne_xor_u32_b32: text = "set.ne.xor.u32.b32"; break;
                case z.set_ne_xor_u32_u32: text = "set.ne.xor.u32.u32"; break;
                case z.set_ne_xor_u32_s32: text = "set.ne.xor.u32.s32"; break;
                case z.set_ne_xor_u32_f32: text = "set.ne.xor.u32.f32"; break;
                case z.set_lt_xor_u32_u32: text = "set.lt.xor.u32.u32"; break;
                case z.set_lt_xor_u32_s32: text = "set.lt.xor.u32.s32"; break;
                case z.set_lt_xor_u32_f32: text = "set.lt.xor.u32.f32"; break;
                case z.set_le_xor_u32_u32: text = "set.le.xor.u32.u32"; break;
                case z.set_le_xor_u32_s32: text = "set.le.xor.u32.s32"; break;
                case z.set_le_xor_u32_f32: text = "set.le.xor.u32.f32"; break;
                case z.set_gt_xor_u32_u32: text = "set.gt.xor.u32.u32"; break;
                case z.set_gt_xor_u32_s32: text = "set.gt.xor.u32.s32"; break;
                case z.set_gt_xor_u32_f32: text = "set.gt.xor.u32.f32"; break;
                case z.set_ge_xor_u32_u32: text = "set.ge.xor.u32.u32"; break;
                case z.set_ge_xor_u32_s32: text = "set.ge.xor.u32.s32"; break;
                case z.set_ge_xor_u32_f32: text = "set.ge.xor.u32.f32"; break;
                case z.set_eq_u32_b64: text = "set.eq.u32.b64"; break;
                case z.set_eq_u32_u64: text = "set.eq.u32.u64"; break;
                case z.set_eq_u32_s64: text = "set.eq.u32.s64"; break;
                case z.set_eq_u32_f64: text = "set.eq.u32.f64"; break;
                case z.set_ne_u32_b64: text = "set.ne.u32.b64"; break;
                case z.set_ne_u32_u64: text = "set.ne.u32.u64"; break;
                case z.set_ne_u32_s64: text = "set.ne.u32.s64"; break;
                case z.set_ne_u32_f64: text = "set.ne.u32.f64"; break;
                case z.set_lt_u32_u64: text = "set.lt.u32.u64"; break;
                case z.set_lt_u32_s64: text = "set.lt.u32.s64"; break;
                case z.set_lt_u32_f64: text = "set.lt.u32.f64"; break;
                case z.set_le_u32_u64: text = "set.le.u32.u64"; break;
                case z.set_le_u32_s64: text = "set.le.u32.s64"; break;
                case z.set_le_u32_f64: text = "set.le.u32.f64"; break;
                case z.set_gt_u32_u64: text = "set.gt.u32.u64"; break;
                case z.set_gt_u32_s64: text = "set.gt.u32.s64"; break;
                case z.set_gt_u32_f64: text = "set.gt.u32.f64"; break;
                case z.set_ge_u32_u64: text = "set.ge.u32.u64"; break;
                case z.set_ge_u32_s64: text = "set.ge.u32.s64"; break;
                case z.set_ge_u32_f64: text = "set.ge.u32.f64"; break;
                case z.set_eq_and_u32_b64: text = "set.eq.and.u32.b64"; break;
                case z.set_eq_and_u32_u64: text = "set.eq.and.u32.u64"; break;
                case z.set_eq_and_u32_s64: text = "set.eq.and.u32.s64"; break;
                case z.set_eq_and_u32_f64: text = "set.eq.and.u32.f64"; break;
                case z.set_ne_and_u32_b64: text = "set.ne.and.u32.b64"; break;
                case z.set_ne_and_u32_u64: text = "set.ne.and.u32.u64"; break;
                case z.set_ne_and_u32_s64: text = "set.ne.and.u32.s64"; break;
                case z.set_ne_and_u32_f64: text = "set.ne.and.u32.f64"; break;
                case z.set_lt_and_u32_u64: text = "set.lt.and.u32.u64"; break;
                case z.set_lt_and_u32_s64: text = "set.lt.and.u32.s64"; break;
                case z.set_lt_and_u32_f64: text = "set.lt.and.u32.f64"; break;
                case z.set_le_and_u32_u64: text = "set.le.and.u32.u64"; break;
                case z.set_le_and_u32_s64: text = "set.le.and.u32.s64"; break;
                case z.set_le_and_u32_f64: text = "set.le.and.u32.f64"; break;
                case z.set_gt_and_u32_u64: text = "set.gt.and.u32.u64"; break;
                case z.set_gt_and_u32_s64: text = "set.gt.and.u32.s64"; break;
                case z.set_gt_and_u32_f64: text = "set.gt.and.u32.f64"; break;
                case z.set_ge_and_u32_u64: text = "set.ge.and.u32.u64"; break;
                case z.set_ge_and_u32_s64: text = "set.ge.and.u32.s64"; break;
                case z.set_ge_and_u32_f64: text = "set.ge.and.u32.f64"; break;
                case z.set_eq_or_u32_b64: text = "set.eq.or.u32.b64"; break;
                case z.set_eq_or_u32_u64: text = "set.eq.or.u32.u64"; break;
                case z.set_eq_or_u32_s64: text = "set.eq.or.u32.s64"; break;
                case z.set_eq_or_u32_f64: text = "set.eq.or.u32.f64"; break;
                case z.set_ne_or_u32_b64: text = "set.ne.or.u32.b64"; break;
                case z.set_ne_or_u32_u64: text = "set.ne.or.u32.u64"; break;
                case z.set_ne_or_u32_s64: text = "set.ne.or.u32.s64"; break;
                case z.set_ne_or_u32_f64: text = "set.ne.or.u32.f64"; break;
                case z.set_lt_or_u32_u64: text = "set.lt.or.u32.u64"; break;
                case z.set_lt_or_u32_s64: text = "set.lt.or.u32.s64"; break;
                case z.set_lt_or_u32_f64: text = "set.lt.or.u32.f64"; break;
                case z.set_le_or_u32_u64: text = "set.le.or.u32.u64"; break;
                case z.set_le_or_u32_s64: text = "set.le.or.u32.s64"; break;
                case z.set_le_or_u32_f64: text = "set.le.or.u32.f64"; break;
                case z.set_gt_or_u32_u64: text = "set.gt.or.u32.u64"; break;
                case z.set_gt_or_u32_s64: text = "set.gt.or.u32.s64"; break;
                case z.set_gt_or_u32_f64: text = "set.gt.or.u32.f64"; break;
                case z.set_ge_or_u32_u64: text = "set.ge.or.u32.u64"; break;
                case z.set_ge_or_u32_s64: text = "set.ge.or.u32.s64"; break;
                case z.set_ge_or_u32_f64: text = "set.ge.or.u32.f64"; break;
                case z.set_eq_xor_u32_b64: text = "set.eq.xor.u32.b64"; break;
                case z.set_eq_xor_u32_u64: text = "set.eq.xor.u32.u64"; break;
                case z.set_eq_xor_u32_s64: text = "set.eq.xor.u32.s64"; break;
                case z.set_eq_xor_u32_f64: text = "set.eq.xor.u32.f64"; break;
                case z.set_ne_xor_u32_b64: text = "set.ne.xor.u32.b64"; break;
                case z.set_ne_xor_u32_u64: text = "set.ne.xor.u32.u64"; break;
                case z.set_ne_xor_u32_s64: text = "set.ne.xor.u32.s64"; break;
                case z.set_ne_xor_u32_f64: text = "set.ne.xor.u32.f64"; break;
                case z.set_lt_xor_u32_u64: text = "set.lt.xor.u32.u64"; break;
                case z.set_lt_xor_u32_s64: text = "set.lt.xor.u32.s64"; break;
                case z.set_lt_xor_u32_f64: text = "set.lt.xor.u32.f64"; break;
                case z.set_le_xor_u32_u64: text = "set.le.xor.u32.u64"; break;
                case z.set_le_xor_u32_s64: text = "set.le.xor.u32.s64"; break;
                case z.set_le_xor_u32_f64: text = "set.le.xor.u32.f64"; break;
                case z.set_gt_xor_u32_u64: text = "set.gt.xor.u32.u64"; break;
                case z.set_gt_xor_u32_s64: text = "set.gt.xor.u32.s64"; break;
                case z.set_gt_xor_u32_f64: text = "set.gt.xor.u32.f64"; break;
                case z.set_ge_xor_u32_u64: text = "set.ge.xor.u32.u64"; break;
                case z.set_ge_xor_u32_s64: text = "set.ge.xor.u32.s64"; break;
                case z.set_ge_xor_u32_f64: text = "set.ge.xor.u32.f64"; break;
                //
                case z.set_eq_s32_b16: text = "set.eq.s32.b16"; break;
                case z.set_eq_s32_u16: text = "set.eq.s32.u16"; break;
                case z.set_eq_s32_s16: text = "set.eq.s32.s16"; break;
                case z.set_ne_s32_b16: text = "set.ne.s32.b16"; break;
                case z.set_ne_s32_u16: text = "set.ne.s32.u16"; break;
                case z.set_ne_s32_s16: text = "set.ne.s32.s16"; break;
                case z.set_lt_s32_u16: text = "set.lt.s32.u16"; break;
                case z.set_lt_s32_s16: text = "set.lt.s32.s16"; break;
                case z.set_le_s32_u16: text = "set.le.s32.u16"; break;
                case z.set_le_s32_s16: text = "set.le.s32.s16"; break;
                case z.set_gt_s32_u16: text = "set.gt.s32.u16"; break;
                case z.set_gt_s32_s16: text = "set.gt.s32.s16"; break;
                case z.set_ge_s32_u16: text = "set.ge.s32.u16"; break;
                case z.set_ge_s32_s16: text = "set.ge.s32.s16"; break;
                case z.set_eq_and_s32_b16: text = "set.eq.and.s32.b16"; break;
                case z.set_eq_and_s32_u16: text = "set.eq.and.s32.u16"; break;
                case z.set_eq_and_s32_s16: text = "set.eq.and.s32.s16"; break;
                case z.set_ne_and_s32_b16: text = "set.ne.and.s32.b16"; break;
                case z.set_ne_and_s32_u16: text = "set.ne.and.s32.u16"; break;
                case z.set_ne_and_s32_s16: text = "set.ne.and.s32.s16"; break;
                case z.set_lt_and_s32_u16: text = "set.lt.and.s32.u16"; break;
                case z.set_lt_and_s32_s16: text = "set.lt.and.s32.s16"; break;
                case z.set_le_and_s32_u16: text = "set.le.and.s32.u16"; break;
                case z.set_le_and_s32_s16: text = "set.le.and.s32.s16"; break;
                case z.set_gt_and_s32_u16: text = "set.gt.and.s32.u16"; break;
                case z.set_gt_and_s32_s16: text = "set.gt.and.s32.s16"; break;
                case z.set_ge_and_s32_u16: text = "set.ge.and.s32.u16"; break;
                case z.set_ge_and_s32_s16: text = "set.ge.and.s32.s16"; break;
                case z.set_eq_or_s32_b16: text = "set.eq.or.s32.b16"; break;
                case z.set_eq_or_s32_u16: text = "set.eq.or.s32.u16"; break;
                case z.set_eq_or_s32_s16: text = "set.eq.or.s32.s16"; break;
                case z.set_ne_or_s32_b16: text = "set.ne.or.s32.b16"; break;
                case z.set_ne_or_s32_u16: text = "set.ne.or.s32.u16"; break;
                case z.set_ne_or_s32_s16: text = "set.ne.or.s32.s16"; break;
                case z.set_lt_or_s32_u16: text = "set.lt.or.s32.u16"; break;
                case z.set_lt_or_s32_s16: text = "set.lt.or.s32.s16"; break;
                case z.set_le_or_s32_u16: text = "set.le.or.s32.u16"; break;
                case z.set_le_or_s32_s16: text = "set.le.or.s32.s16"; break;
                case z.set_gt_or_s32_u16: text = "set.gt.or.s32.u16"; break;
                case z.set_gt_or_s32_s16: text = "set.gt.or.s32.s16"; break;
                case z.set_ge_or_s32_u16: text = "set.ge.or.s32.u16"; break;
                case z.set_ge_or_s32_s16: text = "set.ge.or.s32.s16"; break;
                case z.set_eq_xor_s32_b16: text = "set.eq.xor.s32.b16"; break;
                case z.set_eq_xor_s32_u16: text = "set.eq.xor.s32.u16"; break;
                case z.set_eq_xor_s32_s16: text = "set.eq.xor.s32.s16"; break;
                case z.set_ne_xor_s32_b16: text = "set.ne.xor.s32.b16"; break;
                case z.set_ne_xor_s32_u16: text = "set.ne.xor.s32.u16"; break;
                case z.set_ne_xor_s32_s16: text = "set.ne.xor.s32.s16"; break;
                case z.set_lt_xor_s32_u16: text = "set.lt.xor.s32.u16"; break;
                case z.set_lt_xor_s32_s16: text = "set.lt.xor.s32.s16"; break;
                case z.set_le_xor_s32_u16: text = "set.le.xor.s32.u16"; break;
                case z.set_le_xor_s32_s16: text = "set.le.xor.s32.s16"; break;
                case z.set_gt_xor_s32_u16: text = "set.gt.xor.s32.u16"; break;
                case z.set_gt_xor_s32_s16: text = "set.gt.xor.s32.s16"; break;
                case z.set_ge_xor_s32_u16: text = "set.ge.xor.s32.u16"; break;
                case z.set_ge_xor_s32_s16: text = "set.ge.xor.s32.s16"; break;
                case z.set_eq_s32_b32: text = "set.eq.s32.b32"; break;
                case z.set_eq_s32_u32: text = "set.eq.s32.u32"; break;
                case z.set_eq_s32_s32: text = "set.eq.s32.s32"; break;
                case z.set_eq_s32_f32: text = "set.eq.s32.f32"; break;
                case z.set_ne_s32_b32: text = "set.ne.s32.b32"; break;
                case z.set_ne_s32_u32: text = "set.ne.s32.u32"; break;
                case z.set_ne_s32_s32: text = "set.ne.s32.s32"; break;
                case z.set_ne_s32_f32: text = "set.ne.s32.f32"; break;
                case z.set_lt_s32_u32: text = "set.lt.s32.u32"; break;
                case z.set_lt_s32_s32: text = "set.lt.s32.s32"; break;
                case z.set_lt_s32_f32: text = "set.lt.s32.f32"; break;
                case z.set_le_s32_u32: text = "set.le.s32.u32"; break;
                case z.set_le_s32_s32: text = "set.le.s32.s32"; break;
                case z.set_le_s32_f32: text = "set.le.s32.f32"; break;
                case z.set_gt_s32_u32: text = "set.gt.s32.u32"; break;
                case z.set_gt_s32_s32: text = "set.gt.s32.s32"; break;
                case z.set_gt_s32_f32: text = "set.gt.s32.f32"; break;
                case z.set_ge_s32_u32: text = "set.ge.s32.u32"; break;
                case z.set_ge_s32_s32: text = "set.ge.s32.s32"; break;
                case z.set_ge_s32_f32: text = "set.ge.s32.f32"; break;
                case z.set_eq_and_s32_b32: text = "set.eq.and.s32.b32"; break;
                case z.set_eq_and_s32_u32: text = "set.eq.and.s32.u32"; break;
                case z.set_eq_and_s32_s32: text = "set.eq.and.s32.s32"; break;
                case z.set_eq_and_s32_f32: text = "set.eq.and.s32.f32"; break;
                case z.set_ne_and_s32_b32: text = "set.ne.and.s32.b32"; break;
                case z.set_ne_and_s32_u32: text = "set.ne.and.s32.u32"; break;
                case z.set_ne_and_s32_s32: text = "set.ne.and.s32.s32"; break;
                case z.set_ne_and_s32_f32: text = "set.ne.and.s32.f32"; break;
                case z.set_lt_and_s32_u32: text = "set.lt.and.s32.u32"; break;
                case z.set_lt_and_s32_s32: text = "set.lt.and.s32.s32"; break;
                case z.set_lt_and_s32_f32: text = "set.lt.and.s32.f32"; break;
                case z.set_le_and_s32_u32: text = "set.le.and.s32.u32"; break;
                case z.set_le_and_s32_s32: text = "set.le.and.s32.s32"; break;
                case z.set_le_and_s32_f32: text = "set.le.and.s32.f32"; break;
                case z.set_gt_and_s32_u32: text = "set.gt.and.s32.u32"; break;
                case z.set_gt_and_s32_s32: text = "set.gt.and.s32.s32"; break;
                case z.set_gt_and_s32_f32: text = "set.gt.and.s32.f32"; break;
                case z.set_ge_and_s32_u32: text = "set.ge.and.s32.u32"; break;
                case z.set_ge_and_s32_s32: text = "set.ge.and.s32.s32"; break;
                case z.set_ge_and_s32_f32: text = "set.ge.and.s32.f32"; break;
                case z.set_eq_or_s32_b32: text = "set.eq.or.s32.b32"; break;
                case z.set_eq_or_s32_u32: text = "set.eq.or.s32.u32"; break;
                case z.set_eq_or_s32_s32: text = "set.eq.or.s32.s32"; break;
                case z.set_eq_or_s32_f32: text = "set.eq.or.s32.f32"; break;
                case z.set_ne_or_s32_b32: text = "set.ne.or.s32.b32"; break;
                case z.set_ne_or_s32_u32: text = "set.ne.or.s32.u32"; break;
                case z.set_ne_or_s32_s32: text = "set.ne.or.s32.s32"; break;
                case z.set_ne_or_s32_f32: text = "set.ne.or.s32.f32"; break;
                case z.set_lt_or_s32_u32: text = "set.lt.or.s32.u32"; break;
                case z.set_lt_or_s32_s32: text = "set.lt.or.s32.s32"; break;
                case z.set_lt_or_s32_f32: text = "set.lt.or.s32.f32"; break;
                case z.set_le_or_s32_u32: text = "set.le.or.s32.u32"; break;
                case z.set_le_or_s32_s32: text = "set.le.or.s32.s32"; break;
                case z.set_le_or_s32_f32: text = "set.le.or.s32.f32"; break;
                case z.set_gt_or_s32_u32: text = "set.gt.or.s32.u32"; break;
                case z.set_gt_or_s32_s32: text = "set.gt.or.s32.s32"; break;
                case z.set_gt_or_s32_f32: text = "set.gt.or.s32.f32"; break;
                case z.set_ge_or_s32_u32: text = "set.ge.or.s32.u32"; break;
                case z.set_ge_or_s32_s32: text = "set.ge.or.s32.s32"; break;
                case z.set_ge_or_s32_f32: text = "set.ge.or.s32.f32"; break;
                case z.set_eq_xor_s32_b32: text = "set.eq.xor.s32.b32"; break;
                case z.set_eq_xor_s32_u32: text = "set.eq.xor.s32.u32"; break;
                case z.set_eq_xor_s32_s32: text = "set.eq.xor.s32.s32"; break;
                case z.set_eq_xor_s32_f32: text = "set.eq.xor.s32.f32"; break;
                case z.set_ne_xor_s32_b32: text = "set.ne.xor.s32.b32"; break;
                case z.set_ne_xor_s32_u32: text = "set.ne.xor.s32.u32"; break;
                case z.set_ne_xor_s32_s32: text = "set.ne.xor.s32.s32"; break;
                case z.set_ne_xor_s32_f32: text = "set.ne.xor.s32.f32"; break;
                case z.set_lt_xor_s32_u32: text = "set.lt.xor.s32.u32"; break;
                case z.set_lt_xor_s32_s32: text = "set.lt.xor.s32.s32"; break;
                case z.set_lt_xor_s32_f32: text = "set.lt.xor.s32.f32"; break;
                case z.set_le_xor_s32_u32: text = "set.le.xor.s32.u32"; break;
                case z.set_le_xor_s32_s32: text = "set.le.xor.s32.s32"; break;
                case z.set_le_xor_s32_f32: text = "set.le.xor.s32.f32"; break;
                case z.set_gt_xor_s32_u32: text = "set.gt.xor.s32.u32"; break;
                case z.set_gt_xor_s32_s32: text = "set.gt.xor.s32.s32"; break;
                case z.set_gt_xor_s32_f32: text = "set.gt.xor.s32.f32"; break;
                case z.set_ge_xor_s32_u32: text = "set.ge.xor.s32.u32"; break;
                case z.set_ge_xor_s32_s32: text = "set.ge.xor.s32.s32"; break;
                case z.set_ge_xor_s32_f32: text = "set.ge.xor.s32.f32"; break;
                case z.set_eq_s32_b64: text = "set.eq.s32.b64"; break;
                case z.set_eq_s32_u64: text = "set.eq.s32.u64"; break;
                case z.set_eq_s32_s64: text = "set.eq.s32.s64"; break;
                case z.set_eq_s32_f64: text = "set.eq.s32.f64"; break;
                case z.set_ne_s32_b64: text = "set.ne.s32.b64"; break;
                case z.set_ne_s32_u64: text = "set.ne.s32.u64"; break;
                case z.set_ne_s32_s64: text = "set.ne.s32.s64"; break;
                case z.set_ne_s32_f64: text = "set.ne.s32.f64"; break;
                case z.set_lt_s32_u64: text = "set.lt.s32.u64"; break;
                case z.set_lt_s32_s64: text = "set.lt.s32.s64"; break;
                case z.set_lt_s32_f64: text = "set.lt.s32.f64"; break;
                case z.set_le_s32_u64: text = "set.le.s32.u64"; break;
                case z.set_le_s32_s64: text = "set.le.s32.s64"; break;
                case z.set_le_s32_f64: text = "set.le.s32.f64"; break;
                case z.set_gt_s32_u64: text = "set.gt.s32.u64"; break;
                case z.set_gt_s32_s64: text = "set.gt.s32.s64"; break;
                case z.set_gt_s32_f64: text = "set.gt.s32.f64"; break;
                case z.set_ge_s32_u64: text = "set.ge.s32.u64"; break;
                case z.set_ge_s32_s64: text = "set.ge.s32.s64"; break;
                case z.set_ge_s32_f64: text = "set.ge.s32.f64"; break;
                case z.set_eq_and_s32_b64: text = "set.eq.and.s32.b64"; break;
                case z.set_eq_and_s32_u64: text = "set.eq.and.s32.u64"; break;
                case z.set_eq_and_s32_s64: text = "set.eq.and.s32.s64"; break;
                case z.set_eq_and_s32_f64: text = "set.eq.and.s32.f64"; break;
                case z.set_ne_and_s32_b64: text = "set.ne.and.s32.b64"; break;
                case z.set_ne_and_s32_u64: text = "set.ne.and.s32.u64"; break;
                case z.set_ne_and_s32_s64: text = "set.ne.and.s32.s64"; break;
                case z.set_ne_and_s32_f64: text = "set.ne.and.s32.f64"; break;
                case z.set_lt_and_s32_u64: text = "set.lt.and.s32.u64"; break;
                case z.set_lt_and_s32_s64: text = "set.lt.and.s32.s64"; break;
                case z.set_lt_and_s32_f64: text = "set.lt.and.s32.f64"; break;
                case z.set_le_and_s32_u64: text = "set.le.and.s32.u64"; break;
                case z.set_le_and_s32_s64: text = "set.le.and.s32.s64"; break;
                case z.set_le_and_s32_f64: text = "set.le.and.s32.f64"; break;
                case z.set_gt_and_s32_u64: text = "set.gt.and.s32.u64"; break;
                case z.set_gt_and_s32_s64: text = "set.gt.and.s32.s64"; break;
                case z.set_gt_and_s32_f64: text = "set.gt.and.s32.f64"; break;
                case z.set_ge_and_s32_u64: text = "set.ge.and.s32.u64"; break;
                case z.set_ge_and_s32_s64: text = "set.ge.and.s32.s64"; break;
                case z.set_ge_and_s32_f64: text = "set.ge.and.s32.f64"; break;
                case z.set_eq_or_s32_b64: text = "set.eq.or.s32.b64"; break;
                case z.set_eq_or_s32_u64: text = "set.eq.or.s32.u64"; break;
                case z.set_eq_or_s32_s64: text = "set.eq.or.s32.s64"; break;
                case z.set_eq_or_s32_f64: text = "set.eq.or.s32.f64"; break;
                case z.set_ne_or_s32_b64: text = "set.ne.or.s32.b64"; break;
                case z.set_ne_or_s32_u64: text = "set.ne.or.s32.u64"; break;
                case z.set_ne_or_s32_s64: text = "set.ne.or.s32.s64"; break;
                case z.set_ne_or_s32_f64: text = "set.ne.or.s32.f64"; break;
                case z.set_lt_or_s32_u64: text = "set.lt.or.s32.u64"; break;
                case z.set_lt_or_s32_s64: text = "set.lt.or.s32.s64"; break;
                case z.set_lt_or_s32_f64: text = "set.lt.or.s32.f64"; break;
                case z.set_le_or_s32_u64: text = "set.le.or.s32.u64"; break;
                case z.set_le_or_s32_s64: text = "set.le.or.s32.s64"; break;
                case z.set_le_or_s32_f64: text = "set.le.or.s32.f64"; break;
                case z.set_gt_or_s32_u64: text = "set.gt.or.s32.u64"; break;
                case z.set_gt_or_s32_s64: text = "set.gt.or.s32.s64"; break;
                case z.set_gt_or_s32_f64: text = "set.gt.or.s32.f64"; break;
                case z.set_ge_or_s32_u64: text = "set.ge.or.s32.u64"; break;
                case z.set_ge_or_s32_s64: text = "set.ge.or.s32.s64"; break;
                case z.set_ge_or_s32_f64: text = "set.ge.or.s32.f64"; break;
                case z.set_eq_xor_s32_b64: text = "set.eq.xor.s32.b64"; break;
                case z.set_eq_xor_s32_u64: text = "set.eq.xor.s32.u64"; break;
                case z.set_eq_xor_s32_s64: text = "set.eq.xor.s32.s64"; break;
                case z.set_eq_xor_s32_f64: text = "set.eq.xor.s32.f64"; break;
                case z.set_ne_xor_s32_b64: text = "set.ne.xor.s32.b64"; break;
                case z.set_ne_xor_s32_u64: text = "set.ne.xor.s32.u64"; break;
                case z.set_ne_xor_s32_s64: text = "set.ne.xor.s32.s64"; break;
                case z.set_ne_xor_s32_f64: text = "set.ne.xor.s32.f64"; break;
                case z.set_lt_xor_s32_u64: text = "set.lt.xor.s32.u64"; break;
                case z.set_lt_xor_s32_s64: text = "set.lt.xor.s32.s64"; break;
                case z.set_lt_xor_s32_f64: text = "set.lt.xor.s32.f64"; break;
                case z.set_le_xor_s32_u64: text = "set.le.xor.s32.u64"; break;
                case z.set_le_xor_s32_s64: text = "set.le.xor.s32.s64"; break;
                case z.set_le_xor_s32_f64: text = "set.le.xor.s32.f64"; break;
                case z.set_gt_xor_s32_u64: text = "set.gt.xor.s32.u64"; break;
                case z.set_gt_xor_s32_s64: text = "set.gt.xor.s32.s64"; break;
                case z.set_gt_xor_s32_f64: text = "set.gt.xor.s32.f64"; break;
                case z.set_ge_xor_s32_u64: text = "set.ge.xor.s32.u64"; break;
                case z.set_ge_xor_s32_s64: text = "set.ge.xor.s32.s64"; break;
                case z.set_ge_xor_s32_f64: text = "set.ge.xor.s32.f64"; break;
                //
                case z.set_eq_f32_b16: text = "set.eq.f32.b16"; break;
                case z.set_eq_f32_u16: text = "set.eq.f32.u16"; break;
                case z.set_eq_f32_s16: text = "set.eq.f32.s16"; break;
                case z.set_ne_f32_b16: text = "set.ne.f32.b16"; break;
                case z.set_ne_f32_u16: text = "set.ne.f32.u16"; break;
                case z.set_ne_f32_s16: text = "set.ne.f32.s16"; break;
                case z.set_lt_f32_u16: text = "set.lt.f32.u16"; break;
                case z.set_lt_f32_s16: text = "set.lt.f32.s16"; break;
                case z.set_le_f32_u16: text = "set.le.f32.u16"; break;
                case z.set_le_f32_s16: text = "set.le.f32.s16"; break;
                case z.set_gt_f32_u16: text = "set.gt.f32.u16"; break;
                case z.set_gt_f32_s16: text = "set.gt.f32.s16"; break;
                case z.set_ge_f32_u16: text = "set.ge.f32.u16"; break;
                case z.set_ge_f32_s16: text = "set.ge.f32.s16"; break;
                case z.set_eq_and_f32_b16: text = "set.eq.and.f32.b16"; break;
                case z.set_eq_and_f32_u16: text = "set.eq.and.f32.u16"; break;
                case z.set_eq_and_f32_s16: text = "set.eq.and.f32.s16"; break;
                case z.set_ne_and_f32_b16: text = "set.ne.and.f32.b16"; break;
                case z.set_ne_and_f32_u16: text = "set.ne.and.f32.u16"; break;
                case z.set_ne_and_f32_s16: text = "set.ne.and.f32.s16"; break;
                case z.set_lt_and_f32_u16: text = "set.lt.and.f32.u16"; break;
                case z.set_lt_and_f32_s16: text = "set.lt.and.f32.s16"; break;
                case z.set_le_and_f32_u16: text = "set.le.and.f32.u16"; break;
                case z.set_le_and_f32_s16: text = "set.le.and.f32.s16"; break;
                case z.set_gt_and_f32_u16: text = "set.gt.and.f32.u16"; break;
                case z.set_gt_and_f32_s16: text = "set.gt.and.f32.s16"; break;
                case z.set_ge_and_f32_u16: text = "set.ge.and.f32.u16"; break;
                case z.set_ge_and_f32_s16: text = "set.ge.and.f32.s16"; break;
                case z.set_eq_or_f32_b16: text = "set.eq.or.f32.b16"; break;
                case z.set_eq_or_f32_u16: text = "set.eq.or.f32.u16"; break;
                case z.set_eq_or_f32_s16: text = "set.eq.or.f32.s16"; break;
                case z.set_ne_or_f32_b16: text = "set.ne.or.f32.b16"; break;
                case z.set_ne_or_f32_u16: text = "set.ne.or.f32.u16"; break;
                case z.set_ne_or_f32_s16: text = "set.ne.or.f32.s16"; break;
                case z.set_lt_or_f32_u16: text = "set.lt.or.f32.u16"; break;
                case z.set_lt_or_f32_s16: text = "set.lt.or.f32.s16"; break;
                case z.set_le_or_f32_u16: text = "set.le.or.f32.u16"; break;
                case z.set_le_or_f32_s16: text = "set.le.or.f32.s16"; break;
                case z.set_gt_or_f32_u16: text = "set.gt.or.f32.u16"; break;
                case z.set_gt_or_f32_s16: text = "set.gt.or.f32.s16"; break;
                case z.set_ge_or_f32_u16: text = "set.ge.or.f32.u16"; break;
                case z.set_ge_or_f32_s16: text = "set.ge.or.f32.s16"; break;
                case z.set_eq_xor_f32_b16: text = "set.eq.xor.f32.b16"; break;
                case z.set_eq_xor_f32_u16: text = "set.eq.xor.f32.u16"; break;
                case z.set_eq_xor_f32_s16: text = "set.eq.xor.f32.s16"; break;
                case z.set_ne_xor_f32_b16: text = "set.ne.xor.f32.b16"; break;
                case z.set_ne_xor_f32_u16: text = "set.ne.xor.f32.u16"; break;
                case z.set_ne_xor_f32_s16: text = "set.ne.xor.f32.s16"; break;
                case z.set_lt_xor_f32_u16: text = "set.lt.xor.f32.u16"; break;
                case z.set_lt_xor_f32_s16: text = "set.lt.xor.f32.s16"; break;
                case z.set_le_xor_f32_u16: text = "set.le.xor.f32.u16"; break;
                case z.set_le_xor_f32_s16: text = "set.le.xor.f32.s16"; break;
                case z.set_gt_xor_f32_u16: text = "set.gt.xor.f32.u16"; break;
                case z.set_gt_xor_f32_s16: text = "set.gt.xor.f32.s16"; break;
                case z.set_ge_xor_f32_u16: text = "set.ge.xor.f32.u16"; break;
                case z.set_ge_xor_f32_s16: text = "set.ge.xor.f32.s16"; break;
                case z.set_eq_f32_b32: text = "set.eq.f32.b32"; break;
                case z.set_eq_f32_u32: text = "set.eq.f32.u32"; break;
                case z.set_eq_f32_s32: text = "set.eq.f32.s32"; break;
                case z.set_eq_f32_f32: text = "set.eq.f32.f32"; break;
                case z.set_ne_f32_b32: text = "set.ne.f32.b32"; break;
                case z.set_ne_f32_u32: text = "set.ne.f32.u32"; break;
                case z.set_ne_f32_s32: text = "set.ne.f32.s32"; break;
                case z.set_ne_f32_f32: text = "set.ne.f32.f32"; break;
                case z.set_lt_f32_u32: text = "set.lt.f32.u32"; break;
                case z.set_lt_f32_s32: text = "set.lt.f32.s32"; break;
                case z.set_lt_f32_f32: text = "set.lt.f32.f32"; break;
                case z.set_le_f32_u32: text = "set.le.f32.u32"; break;
                case z.set_le_f32_s32: text = "set.le.f32.s32"; break;
                case z.set_le_f32_f32: text = "set.le.f32.f32"; break;
                case z.set_gt_f32_u32: text = "set.gt.f32.u32"; break;
                case z.set_gt_f32_s32: text = "set.gt.f32.s32"; break;
                case z.set_gt_f32_f32: text = "set.gt.f32.f32"; break;
                case z.set_ge_f32_u32: text = "set.ge.f32.u32"; break;
                case z.set_ge_f32_s32: text = "set.ge.f32.s32"; break;
                case z.set_ge_f32_f32: text = "set.ge.f32.f32"; break;
                case z.set_eq_and_f32_b32: text = "set.eq.and.f32.b32"; break;
                case z.set_eq_and_f32_u32: text = "set.eq.and.f32.u32"; break;
                case z.set_eq_and_f32_s32: text = "set.eq.and.f32.s32"; break;
                case z.set_eq_and_f32_f32: text = "set.eq.and.f32.f32"; break;
                case z.set_ne_and_f32_b32: text = "set.ne.and.f32.b32"; break;
                case z.set_ne_and_f32_u32: text = "set.ne.and.f32.u32"; break;
                case z.set_ne_and_f32_s32: text = "set.ne.and.f32.s32"; break;
                case z.set_ne_and_f32_f32: text = "set.ne.and.f32.f32"; break;
                case z.set_lt_and_f32_u32: text = "set.lt.and.f32.u32"; break;
                case z.set_lt_and_f32_s32: text = "set.lt.and.f32.s32"; break;
                case z.set_lt_and_f32_f32: text = "set.lt.and.f32.f32"; break;
                case z.set_le_and_f32_u32: text = "set.le.and.f32.u32"; break;
                case z.set_le_and_f32_s32: text = "set.le.and.f32.s32"; break;
                case z.set_le_and_f32_f32: text = "set.le.and.f32.f32"; break;
                case z.set_gt_and_f32_u32: text = "set.gt.and.f32.u32"; break;
                case z.set_gt_and_f32_s32: text = "set.gt.and.f32.s32"; break;
                case z.set_gt_and_f32_f32: text = "set.gt.and.f32.f32"; break;
                case z.set_ge_and_f32_u32: text = "set.ge.and.f32.u32"; break;
                case z.set_ge_and_f32_s32: text = "set.ge.and.f32.s32"; break;
                case z.set_ge_and_f32_f32: text = "set.ge.and.f32.f32"; break;
                case z.set_eq_or_f32_b32: text = "set.eq.or.f32.b32"; break;
                case z.set_eq_or_f32_u32: text = "set.eq.or.f32.u32"; break;
                case z.set_eq_or_f32_s32: text = "set.eq.or.f32.s32"; break;
                case z.set_eq_or_f32_f32: text = "set.eq.or.f32.f32"; break;
                case z.set_ne_or_f32_b32: text = "set.ne.or.f32.b32"; break;
                case z.set_ne_or_f32_u32: text = "set.ne.or.f32.u32"; break;
                case z.set_ne_or_f32_s32: text = "set.ne.or.f32.s32"; break;
                case z.set_ne_or_f32_f32: text = "set.ne.or.f32.f32"; break;
                case z.set_lt_or_f32_u32: text = "set.lt.or.f32.u32"; break;
                case z.set_lt_or_f32_s32: text = "set.lt.or.f32.s32"; break;
                case z.set_lt_or_f32_f32: text = "set.lt.or.f32.f32"; break;
                case z.set_le_or_f32_u32: text = "set.le.or.f32.u32"; break;
                case z.set_le_or_f32_s32: text = "set.le.or.f32.s32"; break;
                case z.set_le_or_f32_f32: text = "set.le.or.f32.f32"; break;
                case z.set_gt_or_f32_u32: text = "set.gt.or.f32.u32"; break;
                case z.set_gt_or_f32_s32: text = "set.gt.or.f32.s32"; break;
                case z.set_gt_or_f32_f32: text = "set.gt.or.f32.f32"; break;
                case z.set_ge_or_f32_u32: text = "set.ge.or.f32.u32"; break;
                case z.set_ge_or_f32_s32: text = "set.ge.or.f32.s32"; break;
                case z.set_ge_or_f32_f32: text = "set.ge.or.f32.f32"; break;
                case z.set_eq_xor_f32_b32: text = "set.eq.xor.f32.b32"; break;
                case z.set_eq_xor_f32_u32: text = "set.eq.xor.f32.u32"; break;
                case z.set_eq_xor_f32_s32: text = "set.eq.xor.f32.s32"; break;
                case z.set_eq_xor_f32_f32: text = "set.eq.xor.f32.f32"; break;
                case z.set_ne_xor_f32_b32: text = "set.ne.xor.f32.b32"; break;
                case z.set_ne_xor_f32_u32: text = "set.ne.xor.f32.u32"; break;
                case z.set_ne_xor_f32_s32: text = "set.ne.xor.f32.s32"; break;
                case z.set_ne_xor_f32_f32: text = "set.ne.xor.f32.f32"; break;
                case z.set_lt_xor_f32_u32: text = "set.lt.xor.f32.u32"; break;
                case z.set_lt_xor_f32_s32: text = "set.lt.xor.f32.s32"; break;
                case z.set_lt_xor_f32_f32: text = "set.lt.xor.f32.f32"; break;
                case z.set_le_xor_f32_u32: text = "set.le.xor.f32.u32"; break;
                case z.set_le_xor_f32_s32: text = "set.le.xor.f32.s32"; break;
                case z.set_le_xor_f32_f32: text = "set.le.xor.f32.f32"; break;
                case z.set_gt_xor_f32_u32: text = "set.gt.xor.f32.u32"; break;
                case z.set_gt_xor_f32_s32: text = "set.gt.xor.f32.s32"; break;
                case z.set_gt_xor_f32_f32: text = "set.gt.xor.f32.f32"; break;
                case z.set_ge_xor_f32_u32: text = "set.ge.xor.f32.u32"; break;
                case z.set_ge_xor_f32_s32: text = "set.ge.xor.f32.s32"; break;
                case z.set_ge_xor_f32_f32: text = "set.ge.xor.f32.f32"; break;
                case z.set_eq_f32_b64: text = "set.eq.f32.b64"; break;
                case z.set_eq_f32_u64: text = "set.eq.f32.u64"; break;
                case z.set_eq_f32_s64: text = "set.eq.f32.s64"; break;
                case z.set_eq_f32_f64: text = "set.eq.f32.f64"; break;
                case z.set_ne_f32_b64: text = "set.ne.f32.b64"; break;
                case z.set_ne_f32_u64: text = "set.ne.f32.u64"; break;
                case z.set_ne_f32_s64: text = "set.ne.f32.s64"; break;
                case z.set_ne_f32_f64: text = "set.ne.f32.f64"; break;
                case z.set_lt_f32_u64: text = "set.lt.f32.u64"; break;
                case z.set_lt_f32_s64: text = "set.lt.f32.s64"; break;
                case z.set_lt_f32_f64: text = "set.lt.f32.f64"; break;
                case z.set_le_f32_u64: text = "set.le.f32.u64"; break;
                case z.set_le_f32_s64: text = "set.le.f32.s64"; break;
                case z.set_le_f32_f64: text = "set.le.f32.f64"; break;
                case z.set_gt_f32_u64: text = "set.gt.f32.u64"; break;
                case z.set_gt_f32_s64: text = "set.gt.f32.s64"; break;
                case z.set_gt_f32_f64: text = "set.gt.f32.f64"; break;
                case z.set_ge_f32_u64: text = "set.ge.f32.u64"; break;
                case z.set_ge_f32_s64: text = "set.ge.f32.s64"; break;
                case z.set_ge_f32_f64: text = "set.ge.f32.f64"; break;
                case z.set_eq_and_f32_b64: text = "set.eq.and.f32.b64"; break;
                case z.set_eq_and_f32_u64: text = "set.eq.and.f32.u64"; break;
                case z.set_eq_and_f32_s64: text = "set.eq.and.f32.s64"; break;
                case z.set_eq_and_f32_f64: text = "set.eq.and.f32.f64"; break;
                case z.set_ne_and_f32_b64: text = "set.ne.and.f32.b64"; break;
                case z.set_ne_and_f32_u64: text = "set.ne.and.f32.u64"; break;
                case z.set_ne_and_f32_s64: text = "set.ne.and.f32.s64"; break;
                case z.set_ne_and_f32_f64: text = "set.ne.and.f32.f64"; break;
                case z.set_lt_and_f32_u64: text = "set.lt.and.f32.u64"; break;
                case z.set_lt_and_f32_s64: text = "set.lt.and.f32.s64"; break;
                case z.set_lt_and_f32_f64: text = "set.lt.and.f32.f64"; break;
                case z.set_le_and_f32_u64: text = "set.le.and.f32.u64"; break;
                case z.set_le_and_f32_s64: text = "set.le.and.f32.s64"; break;
                case z.set_le_and_f32_f64: text = "set.le.and.f32.f64"; break;
                case z.set_gt_and_f32_u64: text = "set.gt.and.f32.u64"; break;
                case z.set_gt_and_f32_s64: text = "set.gt.and.f32.s64"; break;
                case z.set_gt_and_f32_f64: text = "set.gt.and.f32.f64"; break;
                case z.set_ge_and_f32_u64: text = "set.ge.and.f32.u64"; break;
                case z.set_ge_and_f32_s64: text = "set.ge.and.f32.s64"; break;
                case z.set_ge_and_f32_f64: text = "set.ge.and.f32.f64"; break;
                case z.set_eq_or_f32_b64: text = "set.eq.or.f32.b64"; break;
                case z.set_eq_or_f32_u64: text = "set.eq.or.f32.u64"; break;
                case z.set_eq_or_f32_s64: text = "set.eq.or.f32.s64"; break;
                case z.set_eq_or_f32_f64: text = "set.eq.or.f32.f64"; break;
                case z.set_ne_or_f32_b64: text = "set.ne.or.f32.b64"; break;
                case z.set_ne_or_f32_u64: text = "set.ne.or.f32.u64"; break;
                case z.set_ne_or_f32_s64: text = "set.ne.or.f32.s64"; break;
                case z.set_ne_or_f32_f64: text = "set.ne.or.f32.f64"; break;
                case z.set_lt_or_f32_u64: text = "set.lt.or.f32.u64"; break;
                case z.set_lt_or_f32_s64: text = "set.lt.or.f32.s64"; break;
                case z.set_lt_or_f32_f64: text = "set.lt.or.f32.f64"; break;
                case z.set_le_or_f32_u64: text = "set.le.or.f32.u64"; break;
                case z.set_le_or_f32_s64: text = "set.le.or.f32.s64"; break;
                case z.set_le_or_f32_f64: text = "set.le.or.f32.f64"; break;
                case z.set_gt_or_f32_u64: text = "set.gt.or.f32.u64"; break;
                case z.set_gt_or_f32_s64: text = "set.gt.or.f32.s64"; break;
                case z.set_gt_or_f32_f64: text = "set.gt.or.f32.f64"; break;
                case z.set_ge_or_f32_u64: text = "set.ge.or.f32.u64"; break;
                case z.set_ge_or_f32_s64: text = "set.ge.or.f32.s64"; break;
                case z.set_ge_or_f32_f64: text = "set.ge.or.f32.f64"; break;
                case z.set_eq_xor_f32_b64: text = "set.eq.xor.f32.b64"; break;
                case z.set_eq_xor_f32_u64: text = "set.eq.xor.f32.u64"; break;
                case z.set_eq_xor_f32_s64: text = "set.eq.xor.f32.s64"; break;
                case z.set_eq_xor_f32_f64: text = "set.eq.xor.f32.f64"; break;
                case z.set_ne_xor_f32_b64: text = "set.ne.xor.f32.b64"; break;
                case z.set_ne_xor_f32_u64: text = "set.ne.xor.f32.u64"; break;
                case z.set_ne_xor_f32_s64: text = "set.ne.xor.f32.s64"; break;
                case z.set_ne_xor_f32_f64: text = "set.ne.xor.f32.f64"; break;
                case z.set_lt_xor_f32_u64: text = "set.lt.xor.f32.u64"; break;
                case z.set_lt_xor_f32_s64: text = "set.lt.xor.f32.s64"; break;
                case z.set_lt_xor_f32_f64: text = "set.lt.xor.f32.f64"; break;
                case z.set_le_xor_f32_u64: text = "set.le.xor.f32.u64"; break;
                case z.set_le_xor_f32_s64: text = "set.le.xor.f32.s64"; break;
                case z.set_le_xor_f32_f64: text = "set.le.xor.f32.f64"; break;
                case z.set_gt_xor_f32_u64: text = "set.gt.xor.f32.u64"; break;
                case z.set_gt_xor_f32_s64: text = "set.gt.xor.f32.s64"; break;
                case z.set_gt_xor_f32_f64: text = "set.gt.xor.f32.f64"; break;
                case z.set_ge_xor_f32_u64: text = "set.ge.xor.f32.u64"; break;
                case z.set_ge_xor_f32_s64: text = "set.ge.xor.f32.s64"; break;
                case z.set_ge_xor_f32_f64: text = "set.ge.xor.f32.f64"; break;
                // {i}
                case z.set_lo_b32_u16: text = "set.lo.b32.u16"; break;
                case z.set_lo_b32_s16: text = "set.lo.b32.s16"; break;
                case z.set_ls_b32_u16: text = "set.ls.b32.u16"; break;
                case z.set_ls_b32_s16: text = "set.ls.b32.s16"; break;
                case z.set_hi_b32_u16: text = "set.hi.b32.u16"; break;
                case z.set_hi_b32_s16: text = "set.hi.b32.s16"; break;
                case z.set_hs_b32_u16: text = "set.hs.b32.u16"; break;
                case z.set_hs_b32_s16: text = "set.hs.b32.s16"; break;
                case z.set_lo_and_b32_u16: text = "set.lo.and.b32.u16"; break;
                case z.set_lo_and_b32_s16: text = "set.lo.and.b32.s16"; break;
                case z.set_ls_and_b32_u16: text = "set.ls.and.b32.u16"; break;
                case z.set_ls_and_b32_s16: text = "set.ls.and.b32.s16"; break;
                case z.set_hi_and_b32_u16: text = "set.hi.and.b32.u16"; break;
                case z.set_hi_and_b32_s16: text = "set.hi.and.b32.s16"; break;
                case z.set_hs_and_b32_u16: text = "set.hs.and.b32.u16"; break;
                case z.set_hs_and_b32_s16: text = "set.hs.and.b32.s16"; break;
                case z.set_lo_or_b32_u16: text = "set.lo.or.b32.u16"; break;
                case z.set_lo_or_b32_s16: text = "set.lo.or.b32.s16"; break;
                case z.set_ls_or_b32_u16: text = "set.ls.or.b32.u16"; break;
                case z.set_ls_or_b32_s16: text = "set.ls.or.b32.s16"; break;
                case z.set_hi_or_b32_u16: text = "set.hi.or.b32.u16"; break;
                case z.set_hi_or_b32_s16: text = "set.hi.or.b32.s16"; break;
                case z.set_hs_or_b32_u16: text = "set.hs.or.b32.u16"; break;
                case z.set_hs_or_b32_s16: text = "set.hs.or.b32.s16"; break;
                case z.set_lo_xor_b32_u16: text = "set.lo.xor.b32.u16"; break;
                case z.set_lo_xor_b32_s16: text = "set.lo.xor.b32.s16"; break;
                case z.set_ls_xor_b32_u16: text = "set.ls.xor.b32.u16"; break;
                case z.set_ls_xor_b32_s16: text = "set.ls.xor.b32.s16"; break;
                case z.set_hi_xor_b32_u16: text = "set.hi.xor.b32.u16"; break;
                case z.set_hi_xor_b32_s16: text = "set.hi.xor.b32.s16"; break;
                case z.set_hs_xor_b32_u16: text = "set.hs.xor.b32.u16"; break;
                case z.set_hs_xor_b32_s16: text = "set.hs.xor.b32.s16"; break;
                case z.set_lo_b32_u32: text = "set.lo.b32.u32"; break;
                case z.set_lo_b32_s32: text = "set.lo.b32.s32"; break;
                case z.set_ls_b32_u32: text = "set.ls.b32.u32"; break;
                case z.set_ls_b32_s32: text = "set.ls.b32.s32"; break;
                case z.set_hi_b32_u32: text = "set.hi.b32.u32"; break;
                case z.set_hi_b32_s32: text = "set.hi.b32.s32"; break;
                case z.set_hs_b32_u32: text = "set.hs.b32.u32"; break;
                case z.set_hs_b32_s32: text = "set.hs.b32.s32"; break;
                case z.set_lo_and_b32_u32: text = "set.lo.and.b32.u32"; break;
                case z.set_lo_and_b32_s32: text = "set.lo.and.b32.s32"; break;
                case z.set_ls_and_b32_u32: text = "set.ls.and.b32.u32"; break;
                case z.set_ls_and_b32_s32: text = "set.ls.and.b32.s32"; break;
                case z.set_hi_and_b32_u32: text = "set.hi.and.b32.u32"; break;
                case z.set_hi_and_b32_s32: text = "set.hi.and.b32.s32"; break;
                case z.set_hs_and_b32_u32: text = "set.hs.and.b32.u32"; break;
                case z.set_hs_and_b32_s32: text = "set.hs.and.b32.s32"; break;
                case z.set_lo_or_b32_u32: text = "set.lo.or.b32.u32"; break;
                case z.set_lo_or_b32_s32: text = "set.lo.or.b32.s32"; break;
                case z.set_ls_or_b32_u32: text = "set.ls.or.b32.u32"; break;
                case z.set_ls_or_b32_s32: text = "set.ls.or.b32.s32"; break;
                case z.set_hi_or_b32_u32: text = "set.hi.or.b32.u32"; break;
                case z.set_hi_or_b32_s32: text = "set.hi.or.b32.s32"; break;
                case z.set_hs_or_b32_u32: text = "set.hs.or.b32.u32"; break;
                case z.set_hs_or_b32_s32: text = "set.hs.or.b32.s32"; break;
                case z.set_lo_xor_b32_u32: text = "set.lo.xor.b32.u32"; break;
                case z.set_lo_xor_b32_s32: text = "set.lo.xor.b32.s32"; break;
                case z.set_ls_xor_b32_u32: text = "set.ls.xor.b32.u32"; break;
                case z.set_ls_xor_b32_s32: text = "set.ls.xor.b32.s32"; break;
                case z.set_hi_xor_b32_u32: text = "set.hi.xor.b32.u32"; break;
                case z.set_hi_xor_b32_s32: text = "set.hi.xor.b32.s32"; break;
                case z.set_hs_xor_b32_u32: text = "set.hs.xor.b32.u32"; break;
                case z.set_hs_xor_b32_s32: text = "set.hs.xor.b32.s32"; break;
                case z.set_lo_b32_u64: text = "set.lo.b32.u64"; break;
                case z.set_lo_b32_s64: text = "set.lo.b32.s64"; break;
                case z.set_ls_b32_u64: text = "set.ls.b32.u64"; break;
                case z.set_ls_b32_s64: text = "set.ls.b32.s64"; break;
                case z.set_hi_b32_u64: text = "set.hi.b32.u64"; break;
                case z.set_hi_b32_s64: text = "set.hi.b32.s64"; break;
                case z.set_hs_b32_u64: text = "set.hs.b32.u64"; break;
                case z.set_hs_b32_s64: text = "set.hs.b32.s64"; break;
                case z.set_lo_and_b32_u64: text = "set.lo.and.b32.u64"; break;
                case z.set_lo_and_b32_s64: text = "set.lo.and.b32.s64"; break;
                case z.set_ls_and_b32_u64: text = "set.ls.and.b32.u64"; break;
                case z.set_ls_and_b32_s64: text = "set.ls.and.b32.s64"; break;
                case z.set_hi_and_b32_u64: text = "set.hi.and.b32.u64"; break;
                case z.set_hi_and_b32_s64: text = "set.hi.and.b32.s64"; break;
                case z.set_hs_and_b32_u64: text = "set.hs.and.b32.u64"; break;
                case z.set_hs_and_b32_s64: text = "set.hs.and.b32.s64"; break;
                case z.set_lo_or_b32_u64: text = "set.lo.or.b32.u64"; break;
                case z.set_lo_or_b32_s64: text = "set.lo.or.b32.s64"; break;
                case z.set_ls_or_b32_u64: text = "set.ls.or.b32.u64"; break;
                case z.set_ls_or_b32_s64: text = "set.ls.or.b32.s64"; break;
                case z.set_hi_or_b32_u64: text = "set.hi.or.b32.u64"; break;
                case z.set_hi_or_b32_s64: text = "set.hi.or.b32.s64"; break;
                case z.set_hs_or_b32_u64: text = "set.hs.or.b32.u64"; break;
                case z.set_hs_or_b32_s64: text = "set.hs.or.b32.s64"; break;
                case z.set_lo_xor_b32_u64: text = "set.lo.xor.b32.u64"; break;
                case z.set_lo_xor_b32_s64: text = "set.lo.xor.b32.s64"; break;
                case z.set_ls_xor_b32_u64: text = "set.ls.xor.b32.u64"; break;
                case z.set_ls_xor_b32_s64: text = "set.ls.xor.b32.s64"; break;
                case z.set_hi_xor_b32_u64: text = "set.hi.xor.b32.u64"; break;
                case z.set_hi_xor_b32_s64: text = "set.hi.xor.b32.s64"; break;
                case z.set_hs_xor_b32_u64: text = "set.hs.xor.b32.u64"; break;
                case z.set_hs_xor_b32_s64: text = "set.hs.xor.b32.s64"; break;
                //
                case z.set_lo_u32_u16: text = "set.lo.u32.u16"; break;
                case z.set_lo_u32_s16: text = "set.lo.u32.s16"; break;
                case z.set_ls_u32_u16: text = "set.ls.u32.u16"; break;
                case z.set_ls_u32_s16: text = "set.ls.u32.s16"; break;
                case z.set_hi_u32_u16: text = "set.hi.u32.u16"; break;
                case z.set_hi_u32_s16: text = "set.hi.u32.s16"; break;
                case z.set_hs_u32_u16: text = "set.hs.u32.u16"; break;
                case z.set_hs_u32_s16: text = "set.hs.u32.s16"; break;
                case z.set_lo_and_u32_u16: text = "set.lo.and.u32.u16"; break;
                case z.set_lo_and_u32_s16: text = "set.lo.and.u32.s16"; break;
                case z.set_ls_and_u32_u16: text = "set.ls.and.u32.u16"; break;
                case z.set_ls_and_u32_s16: text = "set.ls.and.u32.s16"; break;
                case z.set_hi_and_u32_u16: text = "set.hi.and.u32.u16"; break;
                case z.set_hi_and_u32_s16: text = "set.hi.and.u32.s16"; break;
                case z.set_hs_and_u32_u16: text = "set.hs.and.u32.u16"; break;
                case z.set_hs_and_u32_s16: text = "set.hs.and.u32.s16"; break;
                case z.set_lo_or_u32_u16: text = "set.lo.or.u32.u16"; break;
                case z.set_lo_or_u32_s16: text = "set.lo.or.u32.s16"; break;
                case z.set_ls_or_u32_u16: text = "set.ls.or.u32.u16"; break;
                case z.set_ls_or_u32_s16: text = "set.ls.or.u32.s16"; break;
                case z.set_hi_or_u32_u16: text = "set.hi.or.u32.u16"; break;
                case z.set_hi_or_u32_s16: text = "set.hi.or.u32.s16"; break;
                case z.set_hs_or_u32_u16: text = "set.hs.or.u32.u16"; break;
                case z.set_hs_or_u32_s16: text = "set.hs.or.u32.s16"; break;
                case z.set_lo_xor_u32_u16: text = "set.lo.xor.u32.u16"; break;
                case z.set_lo_xor_u32_s16: text = "set.lo.xor.u32.s16"; break;
                case z.set_ls_xor_u32_u16: text = "set.ls.xor.u32.u16"; break;
                case z.set_ls_xor_u32_s16: text = "set.ls.xor.u32.s16"; break;
                case z.set_hi_xor_u32_u16: text = "set.hi.xor.u32.u16"; break;
                case z.set_hi_xor_u32_s16: text = "set.hi.xor.u32.s16"; break;
                case z.set_hs_xor_u32_u16: text = "set.hs.xor.u32.u16"; break;
                case z.set_hs_xor_u32_s16: text = "set.hs.xor.u32.s16"; break;
                case z.set_lo_u32_u32: text = "set.lo.u32.u32"; break;
                case z.set_lo_u32_s32: text = "set.lo.u32.s32"; break;
                case z.set_ls_u32_u32: text = "set.ls.u32.u32"; break;
                case z.set_ls_u32_s32: text = "set.ls.u32.s32"; break;
                case z.set_hi_u32_u32: text = "set.hi.u32.u32"; break;
                case z.set_hi_u32_s32: text = "set.hi.u32.s32"; break;
                case z.set_hs_u32_u32: text = "set.hs.u32.u32"; break;
                case z.set_hs_u32_s32: text = "set.hs.u32.s32"; break;
                case z.set_lo_and_u32_u32: text = "set.lo.and.u32.u32"; break;
                case z.set_lo_and_u32_s32: text = "set.lo.and.u32.s32"; break;
                case z.set_ls_and_u32_u32: text = "set.ls.and.u32.u32"; break;
                case z.set_ls_and_u32_s32: text = "set.ls.and.u32.s32"; break;
                case z.set_hi_and_u32_u32: text = "set.hi.and.u32.u32"; break;
                case z.set_hi_and_u32_s32: text = "set.hi.and.u32.s32"; break;
                case z.set_hs_and_u32_u32: text = "set.hs.and.u32.u32"; break;
                case z.set_hs_and_u32_s32: text = "set.hs.and.u32.s32"; break;
                case z.set_lo_or_u32_u32: text = "set.lo.or.u32.u32"; break;
                case z.set_lo_or_u32_s32: text = "set.lo.or.u32.s32"; break;
                case z.set_ls_or_u32_u32: text = "set.ls.or.u32.u32"; break;
                case z.set_ls_or_u32_s32: text = "set.ls.or.u32.s32"; break;
                case z.set_hi_or_u32_u32: text = "set.hi.or.u32.u32"; break;
                case z.set_hi_or_u32_s32: text = "set.hi.or.u32.s32"; break;
                case z.set_hs_or_u32_u32: text = "set.hs.or.u32.u32"; break;
                case z.set_hs_or_u32_s32: text = "set.hs.or.u32.s32"; break;
                case z.set_lo_xor_u32_u32: text = "set.lo.xor.u32.u32"; break;
                case z.set_lo_xor_u32_s32: text = "set.lo.xor.u32.s32"; break;
                case z.set_ls_xor_u32_u32: text = "set.ls.xor.u32.u32"; break;
                case z.set_ls_xor_u32_s32: text = "set.ls.xor.u32.s32"; break;
                case z.set_hi_xor_u32_u32: text = "set.hi.xor.u32.u32"; break;
                case z.set_hi_xor_u32_s32: text = "set.hi.xor.u32.s32"; break;
                case z.set_hs_xor_u32_u32: text = "set.hs.xor.u32.u32"; break;
                case z.set_hs_xor_u32_s32: text = "set.hs.xor.u32.s32"; break;
                case z.set_lo_u32_u64: text = "set.lo.u32.u64"; break;
                case z.set_lo_u32_s64: text = "set.lo.u32.s64"; break;
                case z.set_ls_u32_u64: text = "set.ls.u32.u64"; break;
                case z.set_ls_u32_s64: text = "set.ls.u32.s64"; break;
                case z.set_hi_u32_u64: text = "set.hi.u32.u64"; break;
                case z.set_hi_u32_s64: text = "set.hi.u32.s64"; break;
                case z.set_hs_u32_u64: text = "set.hs.u32.u64"; break;
                case z.set_hs_u32_s64: text = "set.hs.u32.s64"; break;
                case z.set_lo_and_u32_u64: text = "set.lo.and.u32.u64"; break;
                case z.set_lo_and_u32_s64: text = "set.lo.and.u32.s64"; break;
                case z.set_ls_and_u32_u64: text = "set.ls.and.u32.u64"; break;
                case z.set_ls_and_u32_s64: text = "set.ls.and.u32.s64"; break;
                case z.set_hi_and_u32_u64: text = "set.hi.and.u32.u64"; break;
                case z.set_hi_and_u32_s64: text = "set.hi.and.u32.s64"; break;
                case z.set_hs_and_u32_u64: text = "set.hs.and.u32.u64"; break;
                case z.set_hs_and_u32_s64: text = "set.hs.and.u32.s64"; break;
                case z.set_lo_or_u32_u64: text = "set.lo.or.u32.u64"; break;
                case z.set_lo_or_u32_s64: text = "set.lo.or.u32.s64"; break;
                case z.set_ls_or_u32_u64: text = "set.ls.or.u32.u64"; break;
                case z.set_ls_or_u32_s64: text = "set.ls.or.u32.s64"; break;
                case z.set_hi_or_u32_u64: text = "set.hi.or.u32.u64"; break;
                case z.set_hi_or_u32_s64: text = "set.hi.or.u32.s64"; break;
                case z.set_hs_or_u32_u64: text = "set.hs.or.u32.u64"; break;
                case z.set_hs_or_u32_s64: text = "set.hs.or.u32.s64"; break;
                case z.set_lo_xor_u32_u64: text = "set.lo.xor.u32.u64"; break;
                case z.set_lo_xor_u32_s64: text = "set.lo.xor.u32.s64"; break;
                case z.set_ls_xor_u32_u64: text = "set.ls.xor.u32.u64"; break;
                case z.set_ls_xor_u32_s64: text = "set.ls.xor.u32.s64"; break;
                case z.set_hi_xor_u32_u64: text = "set.hi.xor.u32.u64"; break;
                case z.set_hi_xor_u32_s64: text = "set.hi.xor.u32.s64"; break;
                case z.set_hs_xor_u32_u64: text = "set.hs.xor.u32.u64"; break;
                case z.set_hs_xor_u32_s64: text = "set.hs.xor.u32.s64"; break;
                //
                case z.set_lo_s32_u16: text = "set.lo.s32.u16"; break;
                case z.set_lo_s32_s16: text = "set.lo.s32.s16"; break;
                case z.set_ls_s32_u16: text = "set.ls.s32.u16"; break;
                case z.set_ls_s32_s16: text = "set.ls.s32.s16"; break;
                case z.set_hi_s32_u16: text = "set.hi.s32.u16"; break;
                case z.set_hi_s32_s16: text = "set.hi.s32.s16"; break;
                case z.set_hs_s32_u16: text = "set.hs.s32.u16"; break;
                case z.set_hs_s32_s16: text = "set.hs.s32.s16"; break;
                case z.set_lo_and_s32_u16: text = "set.lo.and.s32.u16"; break;
                case z.set_lo_and_s32_s16: text = "set.lo.and.s32.s16"; break;
                case z.set_ls_and_s32_u16: text = "set.ls.and.s32.u16"; break;
                case z.set_ls_and_s32_s16: text = "set.ls.and.s32.s16"; break;
                case z.set_hi_and_s32_u16: text = "set.hi.and.s32.u16"; break;
                case z.set_hi_and_s32_s16: text = "set.hi.and.s32.s16"; break;
                case z.set_hs_and_s32_u16: text = "set.hs.and.s32.u16"; break;
                case z.set_hs_and_s32_s16: text = "set.hs.and.s32.s16"; break;
                case z.set_lo_or_s32_u16: text = "set.lo.or.s32.u16"; break;
                case z.set_lo_or_s32_s16: text = "set.lo.or.s32.s16"; break;
                case z.set_ls_or_s32_u16: text = "set.ls.or.s32.u16"; break;
                case z.set_ls_or_s32_s16: text = "set.ls.or.s32.s16"; break;
                case z.set_hi_or_s32_u16: text = "set.hi.or.s32.u16"; break;
                case z.set_hi_or_s32_s16: text = "set.hi.or.s32.s16"; break;
                case z.set_hs_or_s32_u16: text = "set.hs.or.s32.u16"; break;
                case z.set_hs_or_s32_s16: text = "set.hs.or.s32.s16"; break;
                case z.set_lo_xor_s32_u16: text = "set.lo.xor.s32.u16"; break;
                case z.set_lo_xor_s32_s16: text = "set.lo.xor.s32.s16"; break;
                case z.set_ls_xor_s32_u16: text = "set.ls.xor.s32.u16"; break;
                case z.set_ls_xor_s32_s16: text = "set.ls.xor.s32.s16"; break;
                case z.set_hi_xor_s32_u16: text = "set.hi.xor.s32.u16"; break;
                case z.set_hi_xor_s32_s16: text = "set.hi.xor.s32.s16"; break;
                case z.set_hs_xor_s32_u16: text = "set.hs.xor.s32.u16"; break;
                case z.set_hs_xor_s32_s16: text = "set.hs.xor.s32.s16"; break;
                case z.set_lo_s32_u32: text = "set.lo.s32.u32"; break;
                case z.set_lo_s32_s32: text = "set.lo.s32.s32"; break;
                case z.set_ls_s32_u32: text = "set.ls.s32.u32"; break;
                case z.set_ls_s32_s32: text = "set.ls.s32.s32"; break;
                case z.set_hi_s32_u32: text = "set.hi.s32.u32"; break;
                case z.set_hi_s32_s32: text = "set.hi.s32.s32"; break;
                case z.set_hs_s32_u32: text = "set.hs.s32.u32"; break;
                case z.set_hs_s32_s32: text = "set.hs.s32.s32"; break;
                case z.set_lo_and_s32_u32: text = "set.lo.and.s32.u32"; break;
                case z.set_lo_and_s32_s32: text = "set.lo.and.s32.s32"; break;
                case z.set_ls_and_s32_u32: text = "set.ls.and.s32.u32"; break;
                case z.set_ls_and_s32_s32: text = "set.ls.and.s32.s32"; break;
                case z.set_hi_and_s32_u32: text = "set.hi.and.s32.u32"; break;
                case z.set_hi_and_s32_s32: text = "set.hi.and.s32.s32"; break;
                case z.set_hs_and_s32_u32: text = "set.hs.and.s32.u32"; break;
                case z.set_hs_and_s32_s32: text = "set.hs.and.s32.s32"; break;
                case z.set_lo_or_s32_u32: text = "set.lo.or.s32.u32"; break;
                case z.set_lo_or_s32_s32: text = "set.lo.or.s32.s32"; break;
                case z.set_ls_or_s32_u32: text = "set.ls.or.s32.u32"; break;
                case z.set_ls_or_s32_s32: text = "set.ls.or.s32.s32"; break;
                case z.set_hi_or_s32_u32: text = "set.hi.or.s32.u32"; break;
                case z.set_hi_or_s32_s32: text = "set.hi.or.s32.s32"; break;
                case z.set_hs_or_s32_u32: text = "set.hs.or.s32.u32"; break;
                case z.set_hs_or_s32_s32: text = "set.hs.or.s32.s32"; break;
                case z.set_lo_xor_s32_u32: text = "set.lo.xor.s32.u32"; break;
                case z.set_lo_xor_s32_s32: text = "set.lo.xor.s32.s32"; break;
                case z.set_ls_xor_s32_u32: text = "set.ls.xor.s32.u32"; break;
                case z.set_ls_xor_s32_s32: text = "set.ls.xor.s32.s32"; break;
                case z.set_hi_xor_s32_u32: text = "set.hi.xor.s32.u32"; break;
                case z.set_hi_xor_s32_s32: text = "set.hi.xor.s32.s32"; break;
                case z.set_hs_xor_s32_u32: text = "set.hs.xor.s32.u32"; break;
                case z.set_hs_xor_s32_s32: text = "set.hs.xor.s32.s32"; break;
                case z.set_lo_s32_u64: text = "set.lo.s32.u64"; break;
                case z.set_lo_s32_s64: text = "set.lo.s32.s64"; break;
                case z.set_ls_s32_u64: text = "set.ls.s32.u64"; break;
                case z.set_ls_s32_s64: text = "set.ls.s32.s64"; break;
                case z.set_hi_s32_u64: text = "set.hi.s32.u64"; break;
                case z.set_hi_s32_s64: text = "set.hi.s32.s64"; break;
                case z.set_hs_s32_u64: text = "set.hs.s32.u64"; break;
                case z.set_hs_s32_s64: text = "set.hs.s32.s64"; break;
                case z.set_lo_and_s32_u64: text = "set.lo.and.s32.u64"; break;
                case z.set_lo_and_s32_s64: text = "set.lo.and.s32.s64"; break;
                case z.set_ls_and_s32_u64: text = "set.ls.and.s32.u64"; break;
                case z.set_ls_and_s32_s64: text = "set.ls.and.s32.s64"; break;
                case z.set_hi_and_s32_u64: text = "set.hi.and.s32.u64"; break;
                case z.set_hi_and_s32_s64: text = "set.hi.and.s32.s64"; break;
                case z.set_hs_and_s32_u64: text = "set.hs.and.s32.u64"; break;
                case z.set_hs_and_s32_s64: text = "set.hs.and.s32.s64"; break;
                case z.set_lo_or_s32_u64: text = "set.lo.or.s32.u64"; break;
                case z.set_lo_or_s32_s64: text = "set.lo.or.s32.s64"; break;
                case z.set_ls_or_s32_u64: text = "set.ls.or.s32.u64"; break;
                case z.set_ls_or_s32_s64: text = "set.ls.or.s32.s64"; break;
                case z.set_hi_or_s32_u64: text = "set.hi.or.s32.u64"; break;
                case z.set_hi_or_s32_s64: text = "set.hi.or.s32.s64"; break;
                case z.set_hs_or_s32_u64: text = "set.hs.or.s32.u64"; break;
                case z.set_hs_or_s32_s64: text = "set.hs.or.s32.s64"; break;
                case z.set_lo_xor_s32_u64: text = "set.lo.xor.s32.u64"; break;
                case z.set_lo_xor_s32_s64: text = "set.lo.xor.s32.s64"; break;
                case z.set_ls_xor_s32_u64: text = "set.ls.xor.s32.u64"; break;
                case z.set_ls_xor_s32_s64: text = "set.ls.xor.s32.s64"; break;
                case z.set_hi_xor_s32_u64: text = "set.hi.xor.s32.u64"; break;
                case z.set_hi_xor_s32_s64: text = "set.hi.xor.s32.s64"; break;
                case z.set_hs_xor_s32_u64: text = "set.hs.xor.s32.u64"; break;
                case z.set_hs_xor_s32_s64: text = "set.hs.xor.s32.s64"; break;
                //
                case z.set_lo_f32_u16: text = "set.lo.f32.u16"; break;
                case z.set_lo_f32_s16: text = "set.lo.f32.s16"; break;
                case z.set_ls_f32_u16: text = "set.ls.f32.u16"; break;
                case z.set_ls_f32_s16: text = "set.ls.f32.s16"; break;
                case z.set_hi_f32_u16: text = "set.hi.f32.u16"; break;
                case z.set_hi_f32_s16: text = "set.hi.f32.s16"; break;
                case z.set_hs_f32_u16: text = "set.hs.f32.u16"; break;
                case z.set_hs_f32_s16: text = "set.hs.f32.s16"; break;
                case z.set_lo_and_f32_u16: text = "set.lo.and.f32.u16"; break;
                case z.set_lo_and_f32_s16: text = "set.lo.and.f32.s16"; break;
                case z.set_ls_and_f32_u16: text = "set.ls.and.f32.u16"; break;
                case z.set_ls_and_f32_s16: text = "set.ls.and.f32.s16"; break;
                case z.set_hi_and_f32_u16: text = "set.hi.and.f32.u16"; break;
                case z.set_hi_and_f32_s16: text = "set.hi.and.f32.s16"; break;
                case z.set_hs_and_f32_u16: text = "set.hs.and.f32.u16"; break;
                case z.set_hs_and_f32_s16: text = "set.hs.and.f32.s16"; break;
                case z.set_lo_or_f32_u16: text = "set.lo.or.f32.u16"; break;
                case z.set_lo_or_f32_s16: text = "set.lo.or.f32.s16"; break;
                case z.set_ls_or_f32_u16: text = "set.ls.or.f32.u16"; break;
                case z.set_ls_or_f32_s16: text = "set.ls.or.f32.s16"; break;
                case z.set_hi_or_f32_u16: text = "set.hi.or.f32.u16"; break;
                case z.set_hi_or_f32_s16: text = "set.hi.or.f32.s16"; break;
                case z.set_hs_or_f32_u16: text = "set.hs.or.f32.u16"; break;
                case z.set_hs_or_f32_s16: text = "set.hs.or.f32.s16"; break;
                case z.set_lo_xor_f32_u16: text = "set.lo.xor.f32.u16"; break;
                case z.set_lo_xor_f32_s16: text = "set.lo.xor.f32.s16"; break;
                case z.set_ls_xor_f32_u16: text = "set.ls.xor.f32.u16"; break;
                case z.set_ls_xor_f32_s16: text = "set.ls.xor.f32.s16"; break;
                case z.set_hi_xor_f32_u16: text = "set.hi.xor.f32.u16"; break;
                case z.set_hi_xor_f32_s16: text = "set.hi.xor.f32.s16"; break;
                case z.set_hs_xor_f32_u16: text = "set.hs.xor.f32.u16"; break;
                case z.set_hs_xor_f32_s16: text = "set.hs.xor.f32.s16"; break;
                case z.set_lo_f32_u32: text = "set.lo.f32.u32"; break;
                case z.set_lo_f32_s32: text = "set.lo.f32.s32"; break;
                case z.set_ls_f32_u32: text = "set.ls.f32.u32"; break;
                case z.set_ls_f32_s32: text = "set.ls.f32.s32"; break;
                case z.set_hi_f32_u32: text = "set.hi.f32.u32"; break;
                case z.set_hi_f32_s32: text = "set.hi.f32.s32"; break;
                case z.set_hs_f32_u32: text = "set.hs.f32.u32"; break;
                case z.set_hs_f32_s32: text = "set.hs.f32.s32"; break;
                case z.set_lo_and_f32_u32: text = "set.lo.and.f32.u32"; break;
                case z.set_lo_and_f32_s32: text = "set.lo.and.f32.s32"; break;
                case z.set_ls_and_f32_u32: text = "set.ls.and.f32.u32"; break;
                case z.set_ls_and_f32_s32: text = "set.ls.and.f32.s32"; break;
                case z.set_hi_and_f32_u32: text = "set.hi.and.f32.u32"; break;
                case z.set_hi_and_f32_s32: text = "set.hi.and.f32.s32"; break;
                case z.set_hs_and_f32_u32: text = "set.hs.and.f32.u32"; break;
                case z.set_hs_and_f32_s32: text = "set.hs.and.f32.s32"; break;
                case z.set_lo_or_f32_u32: text = "set.lo.or.f32.u32"; break;
                case z.set_lo_or_f32_s32: text = "set.lo.or.f32.s32"; break;
                case z.set_ls_or_f32_u32: text = "set.ls.or.f32.u32"; break;
                case z.set_ls_or_f32_s32: text = "set.ls.or.f32.s32"; break;
                case z.set_hi_or_f32_u32: text = "set.hi.or.f32.u32"; break;
                case z.set_hi_or_f32_s32: text = "set.hi.or.f32.s32"; break;
                case z.set_hs_or_f32_u32: text = "set.hs.or.f32.u32"; break;
                case z.set_hs_or_f32_s32: text = "set.hs.or.f32.s32"; break;
                case z.set_lo_xor_f32_u32: text = "set.lo.xor.f32.u32"; break;
                case z.set_lo_xor_f32_s32: text = "set.lo.xor.f32.s32"; break;
                case z.set_ls_xor_f32_u32: text = "set.ls.xor.f32.u32"; break;
                case z.set_ls_xor_f32_s32: text = "set.ls.xor.f32.s32"; break;
                case z.set_hi_xor_f32_u32: text = "set.hi.xor.f32.u32"; break;
                case z.set_hi_xor_f32_s32: text = "set.hi.xor.f32.s32"; break;
                case z.set_hs_xor_f32_u32: text = "set.hs.xor.f32.u32"; break;
                case z.set_hs_xor_f32_s32: text = "set.hs.xor.f32.s32"; break;
                case z.set_lo_f32_u64: text = "set.lo.f32.u64"; break;
                case z.set_lo_f32_s64: text = "set.lo.f32.s64"; break;
                case z.set_ls_f32_u64: text = "set.ls.f32.u64"; break;
                case z.set_ls_f32_s64: text = "set.ls.f32.s64"; break;
                case z.set_hi_f32_u64: text = "set.hi.f32.u64"; break;
                case z.set_hi_f32_s64: text = "set.hi.f32.s64"; break;
                case z.set_hs_f32_u64: text = "set.hs.f32.u64"; break;
                case z.set_hs_f32_s64: text = "set.hs.f32.s64"; break;
                case z.set_lo_and_f32_u64: text = "set.lo.and.f32.u64"; break;
                case z.set_lo_and_f32_s64: text = "set.lo.and.f32.s64"; break;
                case z.set_ls_and_f32_u64: text = "set.ls.and.f32.u64"; break;
                case z.set_ls_and_f32_s64: text = "set.ls.and.f32.s64"; break;
                case z.set_hi_and_f32_u64: text = "set.hi.and.f32.u64"; break;
                case z.set_hi_and_f32_s64: text = "set.hi.and.f32.s64"; break;
                case z.set_hs_and_f32_u64: text = "set.hs.and.f32.u64"; break;
                case z.set_hs_and_f32_s64: text = "set.hs.and.f32.s64"; break;
                case z.set_lo_or_f32_u64: text = "set.lo.or.f32.u64"; break;
                case z.set_lo_or_f32_s64: text = "set.lo.or.f32.s64"; break;
                case z.set_ls_or_f32_u64: text = "set.ls.or.f32.u64"; break;
                case z.set_ls_or_f32_s64: text = "set.ls.or.f32.s64"; break;
                case z.set_hi_or_f32_u64: text = "set.hi.or.f32.u64"; break;
                case z.set_hi_or_f32_s64: text = "set.hi.or.f32.s64"; break;
                case z.set_hs_or_f32_u64: text = "set.hs.or.f32.u64"; break;
                case z.set_hs_or_f32_s64: text = "set.hs.or.f32.s64"; break;
                case z.set_lo_xor_f32_u64: text = "set.lo.xor.f32.u64"; break;
                case z.set_lo_xor_f32_s64: text = "set.lo.xor.f32.s64"; break;
                case z.set_ls_xor_f32_u64: text = "set.ls.xor.f32.u64"; break;
                case z.set_ls_xor_f32_s64: text = "set.ls.xor.f32.s64"; break;
                case z.set_hi_xor_f32_u64: text = "set.hi.xor.f32.u64"; break;
                case z.set_hi_xor_f32_s64: text = "set.hi.xor.f32.s64"; break;
                case z.set_hs_xor_f32_u64: text = "set.hs.xor.f32.u64"; break;
                case z.set_hs_xor_f32_s64: text = "set.hs.xor.f32.s64"; break;
                // {f}
                case z.set_equ_b32_f32: text = "set.equ.b32.f32"; break;
                case z.set_neu_b32_f32: text = "set.neu.b32.f32"; break;
                case z.set_ltu_b32_f32: text = "set.ltu.b32.f32"; break;
                case z.set_hsu_b32_f32: text = "set.hsu.b32.f32"; break;
                case z.set_gtu_b32_f32: text = "set.gtu.b32.f32"; break;
                case z.set_geu_b32_f32: text = "set.geu.b32.f32"; break;
                case z.set_num_b32_f32: text = "set.num.b32.f32"; break;
                case z.set_nan_b32_f32: text = "set.nan.b32.f32"; break;
                case z.set_equ_and_b32_f32: text = "set.equ.and.b32.f32"; break;
                case z.set_neu_and_b32_f32: text = "set.neu.and.b32.f32"; break;
                case z.set_ltu_and_b32_f32: text = "set.ltu.and.b32.f32"; break;
                case z.set_hsu_and_b32_f32: text = "set.hsu.and.b32.f32"; break;
                case z.set_gtu_and_b32_f32: text = "set.gtu.and.b32.f32"; break;
                case z.set_geu_and_b32_f32: text = "set.geu.and.b32.f32"; break;
                case z.set_num_and_b32_f32: text = "set.num.and.b32.f32"; break;
                case z.set_nan_and_b32_f32: text = "set.nan.and.b32.f32"; break;
                case z.set_equ_or_b32_f32: text = "set.equ.or.b32.f32"; break;
                case z.set_neu_or_b32_f32: text = "set.neu.or.b32.f32"; break;
                case z.set_ltu_or_b32_f32: text = "set.ltu.or.b32.f32"; break;
                case z.set_hsu_or_b32_f32: text = "set.hsu.or.b32.f32"; break;
                case z.set_gtu_or_b32_f32: text = "set.gtu.or.b32.f32"; break;
                case z.set_geu_or_b32_f32: text = "set.geu.or.b32.f32"; break;
                case z.set_num_or_b32_f32: text = "set.num.or.b32.f32"; break;
                case z.set_nan_or_b32_f32: text = "set.nan.or.b32.f32"; break;
                case z.set_equ_xor_b32_f32: text = "set.equ.xor.b32.f32"; break;
                case z.set_neu_xor_b32_f32: text = "set.neu.xor.b32.f32"; break;
                case z.set_ltu_xor_b32_f32: text = "set.ltu.xor.b32.f32"; break;
                case z.set_hsu_xor_b32_f32: text = "set.hsu.xor.b32.f32"; break;
                case z.set_gtu_xor_b32_f32: text = "set.gtu.xor.b32.f32"; break;
                case z.set_geu_xor_b32_f32: text = "set.geu.xor.b32.f32"; break;
                case z.set_num_xor_b32_f32: text = "set.num.xor.b32.f32"; break;
                case z.set_nan_xor_b32_f32: text = "set.nan.xor.b32.f32"; break;
                case z.set_equ_b32_f64: text = "set.equ.b32.f64"; break;
                case z.set_neu_b32_f64: text = "set.neu.b32.f64"; break;
                case z.set_ltu_b32_f64: text = "set.ltu.b32.f64"; break;
                case z.set_hsu_b32_f64: text = "set.hsu.b32.f64"; break;
                case z.set_gtu_b32_f64: text = "set.gtu.b32.f64"; break;
                case z.set_geu_b32_f64: text = "set.geu.b32.f64"; break;
                case z.set_num_b32_f64: text = "set.num.b32.f64"; break;
                case z.set_nan_b32_f64: text = "set.nan.b32.f64"; break;
                case z.set_equ_and_b32_f64: text = "set.equ.and.b32.f64"; break;
                case z.set_neu_and_b32_f64: text = "set.neu.and.b32.f64"; break;
                case z.set_ltu_and_b32_f64: text = "set.ltu.and.b32.f64"; break;
                case z.set_hsu_and_b32_f64: text = "set.hsu.and.b32.f64"; break;
                case z.set_gtu_and_b32_f64: text = "set.gtu.and.b32.f64"; break;
                case z.set_geu_and_b32_f64: text = "set.geu.and.b32.f64"; break;
                case z.set_num_and_b32_f64: text = "set.num.and.b32.f64"; break;
                case z.set_nan_and_b32_f64: text = "set.nan.and.b32.f64"; break;
                case z.set_equ_or_b32_f64: text = "set.equ.or.b32.f64"; break;
                case z.set_neu_or_b32_f64: text = "set.neu.or.b32.f64"; break;
                case z.set_ltu_or_b32_f64: text = "set.ltu.or.b32.f64"; break;
                case z.set_hsu_or_b32_f64: text = "set.hsu.or.b32.f64"; break;
                case z.set_gtu_or_b32_f64: text = "set.gtu.or.b32.f64"; break;
                case z.set_geu_or_b32_f64: text = "set.geu.or.b32.f64"; break;
                case z.set_num_or_b32_f64: text = "set.num.or.b32.f64"; break;
                case z.set_nan_or_b32_f64: text = "set.nan.or.b32.f64"; break;
                case z.set_equ_xor_b32_f64: text = "set.equ.xor.b32.f64"; break;
                case z.set_neu_xor_b32_f64: text = "set.neu.xor.b32.f64"; break;
                case z.set_ltu_xor_b32_f64: text = "set.ltu.xor.b32.f64"; break;
                case z.set_hsu_xor_b32_f64: text = "set.hsu.xor.b32.f64"; break;
                case z.set_gtu_xor_b32_f64: text = "set.gtu.xor.b32.f64"; break;
                case z.set_geu_xor_b32_f64: text = "set.geu.xor.b32.f64"; break;
                case z.set_num_xor_b32_f64: text = "set.num.xor.b32.f64"; break;
                case z.set_nan_xor_b32_f64: text = "set.nan.xor.b32.f64"; break;
                //
                case z.set_equ_u32_f32: text = "set.equ.u32.f32"; break;
                case z.set_neu_u32_f32: text = "set.neu.u32.f32"; break;
                case z.set_ltu_u32_f32: text = "set.ltu.u32.f32"; break;
                case z.set_hsu_u32_f32: text = "set.hsu.u32.f32"; break;
                case z.set_gtu_u32_f32: text = "set.gtu.u32.f32"; break;
                case z.set_geu_u32_f32: text = "set.geu.u32.f32"; break;
                case z.set_num_u32_f32: text = "set.num.u32.f32"; break;
                case z.set_nan_u32_f32: text = "set.nan.u32.f32"; break;
                case z.set_equ_and_u32_f32: text = "set.equ.and.u32.f32"; break;
                case z.set_neu_and_u32_f32: text = "set.neu.and.u32.f32"; break;
                case z.set_ltu_and_u32_f32: text = "set.ltu.and.u32.f32"; break;
                case z.set_hsu_and_u32_f32: text = "set.hsu.and.u32.f32"; break;
                case z.set_gtu_and_u32_f32: text = "set.gtu.and.u32.f32"; break;
                case z.set_geu_and_u32_f32: text = "set.geu.and.u32.f32"; break;
                case z.set_num_and_u32_f32: text = "set.num.and.u32.f32"; break;
                case z.set_nan_and_u32_f32: text = "set.nan.and.u32.f32"; break;
                case z.set_equ_or_u32_f32: text = "set.equ.or.u32.f32"; break;
                case z.set_neu_or_u32_f32: text = "set.neu.or.u32.f32"; break;
                case z.set_ltu_or_u32_f32: text = "set.ltu.or.u32.f32"; break;
                case z.set_hsu_or_u32_f32: text = "set.hsu.or.u32.f32"; break;
                case z.set_gtu_or_u32_f32: text = "set.gtu.or.u32.f32"; break;
                case z.set_geu_or_u32_f32: text = "set.geu.or.u32.f32"; break;
                case z.set_num_or_u32_f32: text = "set.num.or.u32.f32"; break;
                case z.set_nan_or_u32_f32: text = "set.nan.or.u32.f32"; break;
                case z.set_equ_xor_u32_f32: text = "set.equ.xor.u32.f32"; break;
                case z.set_neu_xor_u32_f32: text = "set.neu.xor.u32.f32"; break;
                case z.set_ltu_xor_u32_f32: text = "set.ltu.xor.u32.f32"; break;
                case z.set_hsu_xor_u32_f32: text = "set.hsu.xor.u32.f32"; break;
                case z.set_gtu_xor_u32_f32: text = "set.gtu.xor.u32.f32"; break;
                case z.set_geu_xor_u32_f32: text = "set.geu.xor.u32.f32"; break;
                case z.set_num_xor_u32_f32: text = "set.num.xor.u32.f32"; break;
                case z.set_nan_xor_u32_f32: text = "set.nan.xor.u32.f32"; break;
                case z.set_equ_u32_f64: text = "set.equ.u32.f64"; break;
                case z.set_neu_u32_f64: text = "set.neu.u32.f64"; break;
                case z.set_ltu_u32_f64: text = "set.ltu.u32.f64"; break;
                case z.set_hsu_u32_f64: text = "set.hsu.u32.f64"; break;
                case z.set_gtu_u32_f64: text = "set.gtu.u32.f64"; break;
                case z.set_geu_u32_f64: text = "set.geu.u32.f64"; break;
                case z.set_num_u32_f64: text = "set.num.u32.f64"; break;
                case z.set_nan_u32_f64: text = "set.nan.u32.f64"; break;
                case z.set_equ_and_u32_f64: text = "set.equ.and.u32.f64"; break;
                case z.set_neu_and_u32_f64: text = "set.neu.and.u32.f64"; break;
                case z.set_ltu_and_u32_f64: text = "set.ltu.and.u32.f64"; break;
                case z.set_hsu_and_u32_f64: text = "set.hsu.and.u32.f64"; break;
                case z.set_gtu_and_u32_f64: text = "set.gtu.and.u32.f64"; break;
                case z.set_geu_and_u32_f64: text = "set.geu.and.u32.f64"; break;
                case z.set_num_and_u32_f64: text = "set.num.and.u32.f64"; break;
                case z.set_nan_and_u32_f64: text = "set.nan.and.u32.f64"; break;
                case z.set_equ_or_u32_f64: text = "set.equ.or.u32.f64"; break;
                case z.set_neu_or_u32_f64: text = "set.neu.or.u32.f64"; break;
                case z.set_ltu_or_u32_f64: text = "set.ltu.or.u32.f64"; break;
                case z.set_hsu_or_u32_f64: text = "set.hsu.or.u32.f64"; break;
                case z.set_gtu_or_u32_f64: text = "set.gtu.or.u32.f64"; break;
                case z.set_geu_or_u32_f64: text = "set.geu.or.u32.f64"; break;
                case z.set_num_or_u32_f64: text = "set.num.or.u32.f64"; break;
                case z.set_nan_or_u32_f64: text = "set.nan.or.u32.f64"; break;
                case z.set_equ_xor_u32_f64: text = "set.equ.xor.u32.f64"; break;
                case z.set_neu_xor_u32_f64: text = "set.neu.xor.u32.f64"; break;
                case z.set_ltu_xor_u32_f64: text = "set.ltu.xor.u32.f64"; break;
                case z.set_hsu_xor_u32_f64: text = "set.hsu.xor.u32.f64"; break;
                case z.set_gtu_xor_u32_f64: text = "set.gtu.xor.u32.f64"; break;
                case z.set_geu_xor_u32_f64: text = "set.geu.xor.u32.f64"; break;
                case z.set_num_xor_u32_f64: text = "set.num.xor.u32.f64"; break;
                case z.set_nan_xor_u32_f64: text = "set.nan.xor.u32.f64"; break;
                //
                case z.set_equ_s32_f32: text = "set.equ.s32.f32"; break;
                case z.set_neu_s32_f32: text = "set.neu.s32.f32"; break;
                case z.set_ltu_s32_f32: text = "set.ltu.s32.f32"; break;
                case z.set_hsu_s32_f32: text = "set.hsu.s32.f32"; break;
                case z.set_gtu_s32_f32: text = "set.gtu.s32.f32"; break;
                case z.set_geu_s32_f32: text = "set.geu.s32.f32"; break;
                case z.set_num_s32_f32: text = "set.num.s32.f32"; break;
                case z.set_nan_s32_f32: text = "set.nan.s32.f32"; break;
                case z.set_equ_and_s32_f32: text = "set.equ.and.s32.f32"; break;
                case z.set_neu_and_s32_f32: text = "set.neu.and.s32.f32"; break;
                case z.set_ltu_and_s32_f32: text = "set.ltu.and.s32.f32"; break;
                case z.set_hsu_and_s32_f32: text = "set.hsu.and.s32.f32"; break;
                case z.set_gtu_and_s32_f32: text = "set.gtu.and.s32.f32"; break;
                case z.set_geu_and_s32_f32: text = "set.geu.and.s32.f32"; break;
                case z.set_num_and_s32_f32: text = "set.num.and.s32.f32"; break;
                case z.set_nan_and_s32_f32: text = "set.nan.and.s32.f32"; break;
                case z.set_equ_or_s32_f32: text = "set.equ.or.s32.f32"; break;
                case z.set_neu_or_s32_f32: text = "set.neu.or.s32.f32"; break;
                case z.set_ltu_or_s32_f32: text = "set.ltu.or.s32.f32"; break;
                case z.set_hsu_or_s32_f32: text = "set.hsu.or.s32.f32"; break;
                case z.set_gtu_or_s32_f32: text = "set.gtu.or.s32.f32"; break;
                case z.set_geu_or_s32_f32: text = "set.geu.or.s32.f32"; break;
                case z.set_num_or_s32_f32: text = "set.num.or.s32.f32"; break;
                case z.set_nan_or_s32_f32: text = "set.nan.or.s32.f32"; break;
                case z.set_equ_xor_s32_f32: text = "set.equ.xor.s32.f32"; break;
                case z.set_neu_xor_s32_f32: text = "set.neu.xor.s32.f32"; break;
                case z.set_ltu_xor_s32_f32: text = "set.ltu.xor.s32.f32"; break;
                case z.set_hsu_xor_s32_f32: text = "set.hsu.xor.s32.f32"; break;
                case z.set_gtu_xor_s32_f32: text = "set.gtu.xor.s32.f32"; break;
                case z.set_geu_xor_s32_f32: text = "set.geu.xor.s32.f32"; break;
                case z.set_num_xor_s32_f32: text = "set.num.xor.s32.f32"; break;
                case z.set_nan_xor_s32_f32: text = "set.nan.xor.s32.f32"; break;
                case z.set_equ_s32_f64: text = "set.equ.s32.f64"; break;
                case z.set_neu_s32_f64: text = "set.neu.s32.f64"; break;
                case z.set_ltu_s32_f64: text = "set.ltu.s32.f64"; break;
                case z.set_hsu_s32_f64: text = "set.hsu.s32.f64"; break;
                case z.set_gtu_s32_f64: text = "set.gtu.s32.f64"; break;
                case z.set_geu_s32_f64: text = "set.geu.s32.f64"; break;
                case z.set_num_s32_f64: text = "set.num.s32.f64"; break;
                case z.set_nan_s32_f64: text = "set.nan.s32.f64"; break;
                case z.set_equ_and_s32_f64: text = "set.equ.and.s32.f64"; break;
                case z.set_neu_and_s32_f64: text = "set.neu.and.s32.f64"; break;
                case z.set_ltu_and_s32_f64: text = "set.ltu.and.s32.f64"; break;
                case z.set_hsu_and_s32_f64: text = "set.hsu.and.s32.f64"; break;
                case z.set_gtu_and_s32_f64: text = "set.gtu.and.s32.f64"; break;
                case z.set_geu_and_s32_f64: text = "set.geu.and.s32.f64"; break;
                case z.set_num_and_s32_f64: text = "set.num.and.s32.f64"; break;
                case z.set_nan_and_s32_f64: text = "set.nan.and.s32.f64"; break;
                case z.set_equ_or_s32_f64: text = "set.equ.or.s32.f64"; break;
                case z.set_neu_or_s32_f64: text = "set.neu.or.s32.f64"; break;
                case z.set_ltu_or_s32_f64: text = "set.ltu.or.s32.f64"; break;
                case z.set_hsu_or_s32_f64: text = "set.hsu.or.s32.f64"; break;
                case z.set_gtu_or_s32_f64: text = "set.gtu.or.s32.f64"; break;
                case z.set_geu_or_s32_f64: text = "set.geu.or.s32.f64"; break;
                case z.set_num_or_s32_f64: text = "set.num.or.s32.f64"; break;
                case z.set_nan_or_s32_f64: text = "set.nan.or.s32.f64"; break;
                case z.set_equ_xor_s32_f64: text = "set.equ.xor.s32.f64"; break;
                case z.set_neu_xor_s32_f64: text = "set.neu.xor.s32.f64"; break;
                case z.set_ltu_xor_s32_f64: text = "set.ltu.xor.s32.f64"; break;
                case z.set_hsu_xor_s32_f64: text = "set.hsu.xor.s32.f64"; break;
                case z.set_gtu_xor_s32_f64: text = "set.gtu.xor.s32.f64"; break;
                case z.set_geu_xor_s32_f64: text = "set.geu.xor.s32.f64"; break;
                case z.set_num_xor_s32_f64: text = "set.num.xor.s32.f64"; break;
                case z.set_nan_xor_s32_f64: text = "set.nan.xor.s32.f64"; break;
                //
                case z.set_equ_f32_f32: text = "set.equ.f32.f32"; break;
                case z.set_neu_f32_f32: text = "set.neu.f32.f32"; break;
                case z.set_ltu_f32_f32: text = "set.ltu.f32.f32"; break;
                case z.set_hsu_f32_f32: text = "set.hsu.f32.f32"; break;
                case z.set_gtu_f32_f32: text = "set.gtu.f32.f32"; break;
                case z.set_geu_f32_f32: text = "set.geu.f32.f32"; break;
                case z.set_num_f32_f32: text = "set.num.f32.f32"; break;
                case z.set_nan_f32_f32: text = "set.nan.f32.f32"; break;
                case z.set_equ_and_f32_f32: text = "set.equ.and.f32.f32"; break;
                case z.set_neu_and_f32_f32: text = "set.neu.and.f32.f32"; break;
                case z.set_ltu_and_f32_f32: text = "set.ltu.and.f32.f32"; break;
                case z.set_hsu_and_f32_f32: text = "set.hsu.and.f32.f32"; break;
                case z.set_gtu_and_f32_f32: text = "set.gtu.and.f32.f32"; break;
                case z.set_geu_and_f32_f32: text = "set.geu.and.f32.f32"; break;
                case z.set_num_and_f32_f32: text = "set.num.and.f32.f32"; break;
                case z.set_nan_and_f32_f32: text = "set.nan.and.f32.f32"; break;
                case z.set_equ_or_f32_f32: text = "set.equ.or.f32.f32"; break;
                case z.set_neu_or_f32_f32: text = "set.neu.or.f32.f32"; break;
                case z.set_ltu_or_f32_f32: text = "set.ltu.or.f32.f32"; break;
                case z.set_hsu_or_f32_f32: text = "set.hsu.or.f32.f32"; break;
                case z.set_gtu_or_f32_f32: text = "set.gtu.or.f32.f32"; break;
                case z.set_geu_or_f32_f32: text = "set.geu.or.f32.f32"; break;
                case z.set_num_or_f32_f32: text = "set.num.or.f32.f32"; break;
                case z.set_nan_or_f32_f32: text = "set.nan.or.f32.f32"; break;
                case z.set_equ_xor_f32_f32: text = "set.equ.xor.f32.f32"; break;
                case z.set_neu_xor_f32_f32: text = "set.neu.xor.f32.f32"; break;
                case z.set_ltu_xor_f32_f32: text = "set.ltu.xor.f32.f32"; break;
                case z.set_hsu_xor_f32_f32: text = "set.hsu.xor.f32.f32"; break;
                case z.set_gtu_xor_f32_f32: text = "set.gtu.xor.f32.f32"; break;
                case z.set_geu_xor_f32_f32: text = "set.geu.xor.f32.f32"; break;
                case z.set_num_xor_f32_f32: text = "set.num.xor.f32.f32"; break;
                case z.set_nan_xor_f32_f32: text = "set.nan.xor.f32.f32"; break;
                case z.set_equ_f32_f64: text = "set.equ.f32.f64"; break;
                case z.set_neu_f32_f64: text = "set.neu.f32.f64"; break;
                case z.set_ltu_f32_f64: text = "set.ltu.f32.f64"; break;
                case z.set_hsu_f32_f64: text = "set.hsu.f32.f64"; break;
                case z.set_gtu_f32_f64: text = "set.gtu.f32.f64"; break;
                case z.set_geu_f32_f64: text = "set.geu.f32.f64"; break;
                case z.set_num_f32_f64: text = "set.num.f32.f64"; break;
                case z.set_nan_f32_f64: text = "set.nan.f32.f64"; break;
                case z.set_equ_and_f32_f64: text = "set.equ.and.f32.f64"; break;
                case z.set_neu_and_f32_f64: text = "set.neu.and.f32.f64"; break;
                case z.set_ltu_and_f32_f64: text = "set.ltu.and.f32.f64"; break;
                case z.set_hsu_and_f32_f64: text = "set.hsu.and.f32.f64"; break;
                case z.set_gtu_and_f32_f64: text = "set.gtu.and.f32.f64"; break;
                case z.set_geu_and_f32_f64: text = "set.geu.and.f32.f64"; break;
                case z.set_num_and_f32_f64: text = "set.num.and.f32.f64"; break;
                case z.set_nan_and_f32_f64: text = "set.nan.and.f32.f64"; break;
                case z.set_equ_or_f32_f64: text = "set.equ.or.f32.f64"; break;
                case z.set_neu_or_f32_f64: text = "set.neu.or.f32.f64"; break;
                case z.set_ltu_or_f32_f64: text = "set.ltu.or.f32.f64"; break;
                case z.set_hsu_or_f32_f64: text = "set.hsu.or.f32.f64"; break;
                case z.set_gtu_or_f32_f64: text = "set.gtu.or.f32.f64"; break;
                case z.set_geu_or_f32_f64: text = "set.geu.or.f32.f64"; break;
                case z.set_num_or_f32_f64: text = "set.num.or.f32.f64"; break;
                case z.set_nan_or_f32_f64: text = "set.nan.or.f32.f64"; break;
                case z.set_equ_xor_f32_f64: text = "set.equ.xor.f32.f64"; break;
                case z.set_neu_xor_f32_f64: text = "set.neu.xor.f32.f64"; break;
                case z.set_ltu_xor_f32_f64: text = "set.ltu.xor.f32.f64"; break;
                case z.set_hsu_xor_f32_f64: text = "set.hsu.xor.f32.f64"; break;
                case z.set_gtu_xor_f32_f64: text = "set.gtu.xor.f32.f64"; break;
                case z.set_geu_xor_f32_f64: text = "set.geu.xor.f32.f64"; break;
                case z.set_num_xor_f32_f64: text = "set.num.xor.f32.f64"; break;
                case z.set_nan_xor_f32_f64: text = "set.nan.xor.f32.f64"; break;

                // setp
                case z.setp_eq_b16: text = "setp.eq.b16"; break;
                case z.setp_eq_u16: text = "setp.eq.u16"; break;
                case z.setp_eq_s16: text = "setp.eq.s16"; break;
                case z.setp_ne_b16: text = "setp.ne.b16"; break;
                case z.setp_ne_u16: text = "setp.ne.u16"; break;
                case z.setp_ne_s16: text = "setp.ne.s16"; break;
                case z.setp_lt_u16: text = "setp.lt.u16"; break;
                case z.setp_lt_s16: text = "setp.lt.s16"; break;
                case z.setp_le_u16: text = "setp.le.u16"; break;
                case z.setp_le_s16: text = "setp.le.s16"; break;
                case z.setp_gt_u16: text = "setp.gt.u16"; break;
                case z.setp_gt_s16: text = "setp.gt.s16"; break;
                case z.setp_ge_u16: text = "setp.ge.u16"; break;
                case z.setp_ge_s16: text = "setp.ge.s16"; break;
                case z.setp_eq_and_b16: text = "setp.eq.and.b16"; break;
                case z.setp_eq_and_u16: text = "setp.eq.and.u16"; break;
                case z.setp_eq_and_s16: text = "setp.eq.and.s16"; break;
                case z.setp_ne_and_b16: text = "setp.ne.and.b16"; break;
                case z.setp_ne_and_u16: text = "setp.ne.and.u16"; break;
                case z.setp_ne_and_s16: text = "setp.ne.and.s16"; break;
                case z.setp_lt_and_u16: text = "setp.lt.and.u16"; break;
                case z.setp_lt_and_s16: text = "setp.lt.and.s16"; break;
                case z.setp_le_and_u16: text = "setp.le.and.u16"; break;
                case z.setp_le_and_s16: text = "setp.le.and.s16"; break;
                case z.setp_gt_and_u16: text = "setp.gt.and.u16"; break;
                case z.setp_gt_and_s16: text = "setp.gt.and.s16"; break;
                case z.setp_ge_and_u16: text = "setp.ge.and.u16"; break;
                case z.setp_ge_and_s16: text = "setp.ge.and.s16"; break;
                case z.setp_eq_or_b16: text = "setp.eq.or.b16"; break;
                case z.setp_eq_or_u16: text = "setp.eq.or.u16"; break;
                case z.setp_eq_or_s16: text = "setp.eq.or.s16"; break;
                case z.setp_ne_or_b16: text = "setp.ne.or.b16"; break;
                case z.setp_ne_or_u16: text = "setp.ne.or.u16"; break;
                case z.setp_ne_or_s16: text = "setp.ne.or.s16"; break;
                case z.setp_lt_or_u16: text = "setp.lt.or.u16"; break;
                case z.setp_lt_or_s16: text = "setp.lt.or.s16"; break;
                case z.setp_le_or_u16: text = "setp.le.or.u16"; break;
                case z.setp_le_or_s16: text = "setp.le.or.s16"; break;
                case z.setp_gt_or_u16: text = "setp.gt.or.u16"; break;
                case z.setp_gt_or_s16: text = "setp.gt.or.s16"; break;
                case z.setp_ge_or_u16: text = "setp.ge.or.u16"; break;
                case z.setp_ge_or_s16: text = "setp.ge.or.s16"; break;
                case z.setp_eq_xor_b16: text = "setp.eq.xor.b16"; break;
                case z.setp_eq_xor_u16: text = "setp.eq.xor.u16"; break;
                case z.setp_eq_xor_s16: text = "setp.eq.xor.s16"; break;
                case z.setp_ne_xor_b16: text = "setp.ne.xor.b16"; break;
                case z.setp_ne_xor_u16: text = "setp.ne.xor.u16"; break;
                case z.setp_ne_xor_s16: text = "setp.ne.xor.s16"; break;
                case z.setp_lt_xor_u16: text = "setp.lt.xor.u16"; break;
                case z.setp_lt_xor_s16: text = "setp.lt.xor.s16"; break;
                case z.setp_le_xor_u16: text = "setp.le.xor.u16"; break;
                case z.setp_le_xor_s16: text = "setp.le.xor.s16"; break;
                case z.setp_gt_xor_u16: text = "setp.gt.xor.u16"; break;
                case z.setp_gt_xor_s16: text = "setp.gt.xor.s16"; break;
                case z.setp_ge_xor_u16: text = "setp.ge.xor.u16"; break;
                case z.setp_ge_xor_s16: text = "setp.ge.xor.s16"; break;
                case z.setp_eq_b32: text = "setp.eq.b32"; break;
                case z.setp_eq_u32: text = "setp.eq.u32"; break;
                case z.setp_eq_s32: text = "setp.eq.s32"; break;
                case z.setp_eq_f32: text = "setp.eq.f32"; break;
                case z.setp_ne_b32: text = "setp.ne.b32"; break;
                case z.setp_ne_u32: text = "setp.ne.u32"; break;
                case z.setp_ne_s32: text = "setp.ne.s32"; break;
                case z.setp_ne_f32: text = "setp.ne.f32"; break;
                case z.setp_lt_u32: text = "setp.lt.u32"; break;
                case z.setp_lt_s32: text = "setp.lt.s32"; break;
                case z.setp_lt_f32: text = "setp.lt.f32"; break;
                case z.setp_le_u32: text = "setp.le.u32"; break;
                case z.setp_le_s32: text = "setp.le.s32"; break;
                case z.setp_le_f32: text = "setp.le.f32"; break;
                case z.setp_gt_u32: text = "setp.gt.u32"; break;
                case z.setp_gt_s32: text = "setp.gt.s32"; break;
                case z.setp_gt_f32: text = "setp.gt.f32"; break;
                case z.setp_ge_u32: text = "setp.ge.u32"; break;
                case z.setp_ge_s32: text = "setp.ge.s32"; break;
                case z.setp_ge_f32: text = "setp.ge.f32"; break;
                case z.setp_eq_and_b32: text = "setp.eq.and.b32"; break;
                case z.setp_eq_and_u32: text = "setp.eq.and.u32"; break;
                case z.setp_eq_and_s32: text = "setp.eq.and.s32"; break;
                case z.setp_eq_and_f32: text = "setp.eq.and.f32"; break;
                case z.setp_ne_and_b32: text = "setp.ne.and.b32"; break;
                case z.setp_ne_and_u32: text = "setp.ne.and.u32"; break;
                case z.setp_ne_and_s32: text = "setp.ne.and.s32"; break;
                case z.setp_ne_and_f32: text = "setp.ne.and.f32"; break;
                case z.setp_lt_and_u32: text = "setp.lt.and.u32"; break;
                case z.setp_lt_and_s32: text = "setp.lt.and.s32"; break;
                case z.setp_lt_and_f32: text = "setp.lt.and.f32"; break;
                case z.setp_le_and_u32: text = "setp.le.and.u32"; break;
                case z.setp_le_and_s32: text = "setp.le.and.s32"; break;
                case z.setp_le_and_f32: text = "setp.le.and.f32"; break;
                case z.setp_gt_and_u32: text = "setp.gt.and.u32"; break;
                case z.setp_gt_and_s32: text = "setp.gt.and.s32"; break;
                case z.setp_gt_and_f32: text = "setp.gt.and.f32"; break;
                case z.setp_ge_and_u32: text = "setp.ge.and.u32"; break;
                case z.setp_ge_and_s32: text = "setp.ge.and.s32"; break;
                case z.setp_ge_and_f32: text = "setp.ge.and.f32"; break;
                case z.setp_eq_or_b32: text = "setp.eq.or.b32"; break;
                case z.setp_eq_or_u32: text = "setp.eq.or.u32"; break;
                case z.setp_eq_or_s32: text = "setp.eq.or.s32"; break;
                case z.setp_eq_or_f32: text = "setp.eq.or.f32"; break;
                case z.setp_ne_or_b32: text = "setp.ne.or.b32"; break;
                case z.setp_ne_or_u32: text = "setp.ne.or.u32"; break;
                case z.setp_ne_or_s32: text = "setp.ne.or.s32"; break;
                case z.setp_ne_or_f32: text = "setp.ne.or.f32"; break;
                case z.setp_lt_or_u32: text = "setp.lt.or.u32"; break;
                case z.setp_lt_or_s32: text = "setp.lt.or.s32"; break;
                case z.setp_lt_or_f32: text = "setp.lt.or.f32"; break;
                case z.setp_le_or_u32: text = "setp.le.or.u32"; break;
                case z.setp_le_or_s32: text = "setp.le.or.s32"; break;
                case z.setp_le_or_f32: text = "setp.le.or.f32"; break;
                case z.setp_gt_or_u32: text = "setp.gt.or.u32"; break;
                case z.setp_gt_or_s32: text = "setp.gt.or.s32"; break;
                case z.setp_gt_or_f32: text = "setp.gt.or.f32"; break;
                case z.setp_ge_or_u32: text = "setp.ge.or.u32"; break;
                case z.setp_ge_or_s32: text = "setp.ge.or.s32"; break;
                case z.setp_ge_or_f32: text = "setp.ge.or.f32"; break;
                case z.setp_eq_xor_b32: text = "setp.eq.xor.b32"; break;
                case z.setp_eq_xor_u32: text = "setp.eq.xor.u32"; break;
                case z.setp_eq_xor_s32: text = "setp.eq.xor.s32"; break;
                case z.setp_eq_xor_f32: text = "setp.eq.xor.f32"; break;
                case z.setp_ne_xor_b32: text = "setp.ne.xor.b32"; break;
                case z.setp_ne_xor_u32: text = "setp.ne.xor.u32"; break;
                case z.setp_ne_xor_s32: text = "setp.ne.xor.s32"; break;
                case z.setp_ne_xor_f32: text = "setp.ne.xor.f32"; break;
                case z.setp_lt_xor_u32: text = "setp.lt.xor.u32"; break;
                case z.setp_lt_xor_s32: text = "setp.lt.xor.s32"; break;
                case z.setp_lt_xor_f32: text = "setp.lt.xor.f32"; break;
                case z.setp_le_xor_u32: text = "setp.le.xor.u32"; break;
                case z.setp_le_xor_s32: text = "setp.le.xor.s32"; break;
                case z.setp_le_xor_f32: text = "setp.le.xor.f32"; break;
                case z.setp_gt_xor_u32: text = "setp.gt.xor.u32"; break;
                case z.setp_gt_xor_s32: text = "setp.gt.xor.s32"; break;
                case z.setp_gt_xor_f32: text = "setp.gt.xor.f32"; break;
                case z.setp_ge_xor_u32: text = "setp.ge.xor.u32"; break;
                case z.setp_ge_xor_s32: text = "setp.ge.xor.s32"; break;
                case z.setp_ge_xor_f32: text = "setp.ge.xor.f32"; break;
                case z.setp_eq_b64: text = "setp.eq.b64"; break;
                case z.setp_eq_u64: text = "setp.eq.u64"; break;
                case z.setp_eq_s64: text = "setp.eq.s64"; break;
                case z.setp_eq_f64: text = "setp.eq.f64"; break;
                case z.setp_ne_b64: text = "setp.ne.b64"; break;
                case z.setp_ne_u64: text = "setp.ne.u64"; break;
                case z.setp_ne_s64: text = "setp.ne.s64"; break;
                case z.setp_ne_f64: text = "setp.ne.f64"; break;
                case z.setp_lt_u64: text = "setp.lt.u64"; break;
                case z.setp_lt_s64: text = "setp.lt.s64"; break;
                case z.setp_lt_f64: text = "setp.lt.f64"; break;
                case z.setp_le_u64: text = "setp.le.u64"; break;
                case z.setp_le_s64: text = "setp.le.s64"; break;
                case z.setp_le_f64: text = "setp.le.f64"; break;
                case z.setp_gt_u64: text = "setp.gt.u64"; break;
                case z.setp_gt_s64: text = "setp.gt.s64"; break;
                case z.setp_gt_f64: text = "setp.gt.f64"; break;
                case z.setp_ge_u64: text = "setp.ge.u64"; break;
                case z.setp_ge_s64: text = "setp.ge.s64"; break;
                case z.setp_ge_f64: text = "setp.ge.f64"; break;
                case z.setp_eq_and_b64: text = "setp.eq.and.b64"; break;
                case z.setp_eq_and_u64: text = "setp.eq.and.u64"; break;
                case z.setp_eq_and_s64: text = "setp.eq.and.s64"; break;
                case z.setp_eq_and_f64: text = "setp.eq.and.f64"; break;
                case z.setp_ne_and_b64: text = "setp.ne.and.b64"; break;
                case z.setp_ne_and_u64: text = "setp.ne.and.u64"; break;
                case z.setp_ne_and_s64: text = "setp.ne.and.s64"; break;
                case z.setp_ne_and_f64: text = "setp.ne.and.f64"; break;
                case z.setp_lt_and_u64: text = "setp.lt.and.u64"; break;
                case z.setp_lt_and_s64: text = "setp.lt.and.s64"; break;
                case z.setp_lt_and_f64: text = "setp.lt.and.f64"; break;
                case z.setp_le_and_u64: text = "setp.le.and.u64"; break;
                case z.setp_le_and_s64: text = "setp.le.and.s64"; break;
                case z.setp_le_and_f64: text = "setp.le.and.f64"; break;
                case z.setp_gt_and_u64: text = "setp.gt.and.u64"; break;
                case z.setp_gt_and_s64: text = "setp.gt.and.s64"; break;
                case z.setp_gt_and_f64: text = "setp.gt.and.f64"; break;
                case z.setp_ge_and_u64: text = "setp.ge.and.u64"; break;
                case z.setp_ge_and_s64: text = "setp.ge.and.s64"; break;
                case z.setp_ge_and_f64: text = "setp.ge.and.f64"; break;
                case z.setp_eq_or_b64: text = "setp.eq.or.b64"; break;
                case z.setp_eq_or_u64: text = "setp.eq.or.u64"; break;
                case z.setp_eq_or_s64: text = "setp.eq.or.s64"; break;
                case z.setp_eq_or_f64: text = "setp.eq.or.f64"; break;
                case z.setp_ne_or_b64: text = "setp.ne.or.b64"; break;
                case z.setp_ne_or_u64: text = "setp.ne.or.u64"; break;
                case z.setp_ne_or_s64: text = "setp.ne.or.s64"; break;
                case z.setp_ne_or_f64: text = "setp.ne.or.f64"; break;
                case z.setp_lt_or_u64: text = "setp.lt.or.u64"; break;
                case z.setp_lt_or_s64: text = "setp.lt.or.s64"; break;
                case z.setp_lt_or_f64: text = "setp.lt.or.f64"; break;
                case z.setp_le_or_u64: text = "setp.le.or.u64"; break;
                case z.setp_le_or_s64: text = "setp.le.or.s64"; break;
                case z.setp_le_or_f64: text = "setp.le.or.f64"; break;
                case z.setp_gt_or_u64: text = "setp.gt.or.u64"; break;
                case z.setp_gt_or_s64: text = "setp.gt.or.s64"; break;
                case z.setp_gt_or_f64: text = "setp.gt.or.f64"; break;
                case z.setp_ge_or_u64: text = "setp.ge.or.u64"; break;
                case z.setp_ge_or_s64: text = "setp.ge.or.s64"; break;
                case z.setp_ge_or_f64: text = "setp.ge.or.f64"; break;
                case z.setp_eq_xor_b64: text = "setp.eq.xor.b64"; break;
                case z.setp_eq_xor_u64: text = "setp.eq.xor.u64"; break;
                case z.setp_eq_xor_s64: text = "setp.eq.xor.s64"; break;
                case z.setp_eq_xor_f64: text = "setp.eq.xor.f64"; break;
                case z.setp_ne_xor_b64: text = "setp.ne.xor.b64"; break;
                case z.setp_ne_xor_u64: text = "setp.ne.xor.u64"; break;
                case z.setp_ne_xor_s64: text = "setp.ne.xor.s64"; break;
                case z.setp_ne_xor_f64: text = "setp.ne.xor.f64"; break;
                case z.setp_lt_xor_u64: text = "setp.lt.xor.u64"; break;
                case z.setp_lt_xor_s64: text = "setp.lt.xor.s64"; break;
                case z.setp_lt_xor_f64: text = "setp.lt.xor.f64"; break;
                case z.setp_le_xor_u64: text = "setp.le.xor.u64"; break;
                case z.setp_le_xor_s64: text = "setp.le.xor.s64"; break;
                case z.setp_le_xor_f64: text = "setp.le.xor.f64"; break;
                case z.setp_gt_xor_u64: text = "setp.gt.xor.u64"; break;
                case z.setp_gt_xor_s64: text = "setp.gt.xor.s64"; break;
                case z.setp_gt_xor_f64: text = "setp.gt.xor.f64"; break;
                case z.setp_ge_xor_u64: text = "setp.ge.xor.u64"; break;
                case z.setp_ge_xor_s64: text = "setp.ge.xor.s64"; break;
                case z.setp_ge_xor_f64: text = "setp.ge.xor.f64"; break;
                // {i}
                case z.setp_lo_u16: text = "setp.lo.u16"; break;
                case z.setp_lo_s16: text = "setp.lo.s16"; break;
                case z.setp_ls_u16: text = "setp.ls.u16"; break;
                case z.setp_ls_s16: text = "setp.ls.s16"; break;
                case z.setp_hi_u16: text = "setp.hi.u16"; break;
                case z.setp_hi_s16: text = "setp.hi.s16"; break;
                case z.setp_hs_u16: text = "setp.hs.u16"; break;
                case z.setp_hs_s16: text = "setp.hs.s16"; break;
                case z.setp_lo_and_u16: text = "setp.lo.and.u16"; break;
                case z.setp_lo_and_s16: text = "setp.lo.and.s16"; break;
                case z.setp_ls_and_u16: text = "setp.ls.and.u16"; break;
                case z.setp_ls_and_s16: text = "setp.ls.and.s16"; break;
                case z.setp_hi_and_u16: text = "setp.hi.and.u16"; break;
                case z.setp_hi_and_s16: text = "setp.hi.and.s16"; break;
                case z.setp_hs_and_u16: text = "setp.hs.and.u16"; break;
                case z.setp_hs_and_s16: text = "setp.hs.and.s16"; break;
                case z.setp_lo_or_u16: text = "setp.lo.or.u16"; break;
                case z.setp_lo_or_s16: text = "setp.lo.or.s16"; break;
                case z.setp_ls_or_u16: text = "setp.ls.or.u16"; break;
                case z.setp_ls_or_s16: text = "setp.ls.or.s16"; break;
                case z.setp_hi_or_u16: text = "setp.hi.or.u16"; break;
                case z.setp_hi_or_s16: text = "setp.hi.or.s16"; break;
                case z.setp_hs_or_u16: text = "setp.hs.or.u16"; break;
                case z.setp_hs_or_s16: text = "setp.hs.or.s16"; break;
                case z.setp_lo_xor_u16: text = "setp.lo.xor.u16"; break;
                case z.setp_lo_xor_s16: text = "setp.lo.xor.s16"; break;
                case z.setp_ls_xor_u16: text = "setp.ls.xor.u16"; break;
                case z.setp_ls_xor_s16: text = "setp.ls.xor.s16"; break;
                case z.setp_hi_xor_u16: text = "setp.hi.xor.u16"; break;
                case z.setp_hi_xor_s16: text = "setp.hi.xor.s16"; break;
                case z.setp_hs_xor_u16: text = "setp.hs.xor.u16"; break;
                case z.setp_hs_xor_s16: text = "setp.hs.xor.s16"; break;
                // {f}
                case z.setp_equ_f32: text = "setp.equ.f32"; break;
                case z.setp_neu_f32: text = "setp.neu.f32"; break;
                case z.setp_ltu_f32: text = "setp.ltu.f32"; break;
                case z.setp_leu_f32: text = "setp.leu.f32"; break;
                case z.setp_gtu_f32: text = "setp.gtu.f32"; break;
                case z.setp_geu_f32: text = "setp.geu.f32"; break;
                case z.setp_num_f32: text = "setp.num.f32"; break;
                case z.setp_nan_f32: text = "setp.nan.f32"; break;
                case z.setp_equ_and_f32: text = "setp.gtu.and.f32"; break;
                case z.setp_neu_and_f32: text = "setp.geu.and.f32"; break;
                case z.setp_ltu_and_f32: text = "setp.ltu.and.f32"; break;
                case z.setp_leu_and_f32: text = "setp.leu.and.f32"; break;
                case z.setp_gtu_and_f32: text = "setp.gtu.and.f32"; break;
                case z.setp_geu_and_f32: text = "setp.geu.and.f32"; break;
                case z.setp_num_and_f32: text = "setp.num.and.f32"; break;
                case z.setp_nan_and_f32: text = "setp.nan.and.f32"; break;
                case z.setp_equ_or_f32: text = "setp.gtu.or.f32"; break;
                case z.setp_neu_or_f32: text = "setp.geu.or.f32"; break;
                case z.setp_ltu_or_f32: text = "setp.ltu.or.f32"; break;
                case z.setp_leu_or_f32: text = "setp.leu.or.f32"; break;
                case z.setp_gtu_or_f32: text = "setp.gtu.or.f32"; break;
                case z.setp_geu_or_f32: text = "setp.geu.or.f32"; break;
                case z.setp_num_or_f32: text = "setp.num.or.f32"; break;
                case z.setp_nan_or_f32: text = "setp.nan.or.f32"; break;
                case z.setp_equ_xor_f32: text = "setp.gtu.xor.f32"; break;
                case z.setp_neu_xor_f32: text = "setp.geu.xor.f32"; break;
                case z.setp_ltu_xor_f32: text = "setp.ltu.xor.f32"; break;
                case z.setp_leu_xor_f32: text = "setp.leu.xor.f32"; break;
                case z.setp_gtu_xor_f32: text = "setp.gtu.xor.f32"; break;
                case z.setp_geu_xor_f32: text = "setp.geu.xor.f32"; break;
                case z.setp_num_xor_f32: text = "setp.num.xor.f32"; break;
                case z.setp_nan_xor_f32: text = "setp.nan.xor.f32"; break;
                case z.setp_equ_f64: text = "setp.equ.f64"; break;
                case z.setp_neu_f64: text = "setp.neu.f64"; break;
                case z.setp_ltu_f64: text = "setp.ltu.f64"; break;
                case z.setp_leu_f64: text = "setp.leu.f64"; break;
                case z.setp_equ_and_f64: text = "setp.gtu.and.f64"; break;
                case z.setp_neu_and_f64: text = "setp.geu.and.f64"; break;
                case z.setp_ltu_and_f64: text = "setp.ltu.and.f64"; break;
                case z.setp_leu_and_f64: text = "setp.leu.and.f64"; break;
                case z.setp_gtu_and_f64: text = "setp.gtu.and.f64"; break;
                case z.setp_geu_and_f64: text = "setp.geu.and.f64"; break;
                case z.setp_num_and_f64: text = "setp.num.and.f64"; break;
                case z.setp_nan_and_f64: text = "setp.nan.and.f64"; break;
                case z.setp_equ_or_f64: text = "setp.gtu.or.f64"; break;
                case z.setp_neu_or_f64: text = "setp.geu.or.f64"; break;
                case z.setp_ltu_or_f64: text = "setp.ltu.or.f64"; break;
                case z.setp_leu_or_f64: text = "setp.leu.or.f64"; break;
                case z.setp_gtu_or_f64: text = "setp.gtu.or.f64"; break;
                case z.setp_geu_or_f64: text = "setp.geu.or.f64"; break;
                case z.setp_num_or_f64: text = "setp.num.or.f64"; break;
                case z.setp_nan_or_f64: text = "setp.nan.or.f64"; break;
                case z.setp_equ_xor_f64: text = "setp.gtu.xor.f64"; break;
                case z.setp_neu_xor_f64: text = "setp.geu.xor.f64"; break;
                case z.setp_ltu_xor_f64: text = "setp.ltu.xor.f64"; break;
                case z.setp_leu_xor_f64: text = "setp.leu.xor.f64"; break;
                case z.setp_gtu_xor_f64: text = "setp.gtu.xor.f64"; break;
                case z.setp_geu_xor_f64: text = "setp.geu.xor.f64"; break;
                case z.setp_num_xor_f64: text = "setp.num.xor.f64"; break;
                case z.setp_nan_xor_f64: text = "setp.nan.xor.f64"; break;

                // selp
                case z.selp_b16: text = "selp.b16"; break;
                case z.selp_b32: text = "selp.b32"; break;
                case z.selp_b64: text = "selp.b64"; break;
                case z.selp_u16: text = "selp.u16"; break;
                case z.selp_u32: text = "selp.u32"; break;
                case z.selp_u64: text = "selp.u64"; break;
                case z.selp_s16: text = "selp.s16"; break;
                case z.selp_s32: text = "selp.s32"; break;
                case z.selp_s64: text = "selp.s64"; break;
                case z.selp_f32: text = "selp.f32"; break;
                case z.selp_f64: text = "selp.f64"; break;

                // slct
                case z.slct_b16_s32: text = "slct.b16.s32"; break;
                case z.slct_b32_s32: text = "slct.b32.s32"; break;
                case z.slct_b64_s32: text = "slct.b64.s32"; break;
                case z.slct_u16_s32: text = "slct.u16.s32"; break;
                case z.slct_u32_s32: text = "slct.u32.s32"; break;
                case z.slct_u64_s32: text = "slct.u64.s32"; break;
                case z.slct_s16_s32: text = "slct.s16.s32"; break;
                case z.slct_s32_s32: text = "slct.s32.s32"; break;
                case z.slct_s64_s32: text = "slct.s64.s32"; break;
                case z.slct_f32_s32: text = "slct.f32.s32"; break;
                case z.slct_f64_s32: text = "slct.f64.s32"; break;
                //
                case z.slct_b16_f32: text = "slct.b16.f32"; break;
                case z.slct_b32_f32: text = "slct.b32.f32"; break;
                case z.slct_b64_f32: text = "slct.b64.f32"; break;
                case z.slct_u16_f32: text = "slct.u16.f32"; break;
                case z.slct_u32_f32: text = "slct.u32.f32"; break;
                case z.slct_u64_f32: text = "slct.u64.f32"; break;
                case z.slct_s16_f32: text = "slct.s16.f32"; break;
                case z.slct_s32_f32: text = "slct.s32.f32"; break;
                case z.slct_s64_f32: text = "slct.s64.f32"; break;
                case z.slct_f32_f32: text = "slct.f32.f32"; break;
                case z.slct_f64_f32: text = "slct.f64.f32"; break;
                //
                default: throw new InvalidOperationException();
            }
            EmitBasicOpcode(w, instruction, text);
        }
    }
}
