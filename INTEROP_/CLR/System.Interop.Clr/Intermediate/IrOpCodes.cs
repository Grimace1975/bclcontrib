using System.Collections.Generic;
using System.Reflection.Emit;
namespace System.Interop.Intermediate
{
	partial class IrOpCodes
	{
		public static readonly IrOpCode Nop = new IrOpCode("nop", IrCode.Nop, FlowControl.Next, OpCodes.Nop);
		public static readonly IrOpCode Break = new IrOpCode("break", IrCode.Break, FlowControl.Break, OpCodes.Break);
		public static readonly IrOpCode Ldnull = new IrOpCode("ldnull", IrCode.Ldnull, FlowControl.Next, OpCodes.Ldnull);
		public static readonly IrOpCode Ldc_I4 = new IrOpCode("ldc.i4", IrCode.Ldc_I4, FlowControl.Next, OpCodes.Ldc_I4);
		public static readonly IrOpCode Ldc_I8 = new IrOpCode("ldc.i8", IrCode.Ldc_I8, FlowControl.Next, OpCodes.Ldc_I8);
		public static readonly IrOpCode Ldc_R4 = new IrOpCode("ldc.r4", IrCode.Ldc_R4, FlowControl.Next, OpCodes.Ldc_R4);
		public static readonly IrOpCode Ldc_R8 = new IrOpCode("ldc.r8", IrCode.Ldc_R8, FlowControl.Next, OpCodes.Ldc_R8);
		public static readonly IrOpCode Dup = new IrOpCode("dup", IrCode.Dup, FlowControl.Next, OpCodes.Dup);
		public static readonly IrOpCode Pop = new IrOpCode("pop", IrCode.Pop, FlowControl.Next, OpCodes.Pop);
		public static readonly IrOpCode Jmp = new IrOpCode("jmp", IrCode.Jmp, FlowControl.Call, OpCodes.Jmp);
		public static readonly IrOpCode Call = new IrOpCode("call", IrCode.Call, FlowControl.Call, OpCodes.Call);
		public static readonly IrOpCode Calli = new IrOpCode("calli", IrCode.Calli, FlowControl.Call, OpCodes.Calli);
		public static readonly IrOpCode Ret = new IrOpCode("ret", IrCode.Ret, FlowControl.Return, OpCodes.Ret);
		public static readonly IrOpCode Br = new IrOpCode("br", IrCode.Br, FlowControl.Branch, OpCodes.Br);
		public static readonly IrOpCode Brfalse = new IrOpCode("brfalse", IrCode.Brfalse, FlowControl.Cond_Branch, OpCodes.Brfalse);
		public static readonly IrOpCode Brtrue = new IrOpCode("brtrue", IrCode.Brtrue, FlowControl.Cond_Branch, OpCodes.Brtrue);
		public static readonly IrOpCode Beq = new IrOpCode("beq", IrCode.Beq, FlowControl.Cond_Branch, OpCodes.Beq);
		public static readonly IrOpCode Bge = new IrOpCode("bge", IrCode.Bge, FlowControl.Cond_Branch, OpCodes.Bge);
		public static readonly IrOpCode Bgt = new IrOpCode("bgt", IrCode.Bgt, FlowControl.Cond_Branch, OpCodes.Bgt);
		public static readonly IrOpCode Ble = new IrOpCode("ble", IrCode.Ble, FlowControl.Cond_Branch, OpCodes.Ble);
		public static readonly IrOpCode Blt = new IrOpCode("blt", IrCode.Blt, FlowControl.Cond_Branch, OpCodes.Blt);
		public static readonly IrOpCode Bne_Un = new IrOpCode("bne.un", IrCode.Bne_Un, FlowControl.Cond_Branch, OpCodes.Bne_Un);
		public static readonly IrOpCode Bge_Un = new IrOpCode("bge.un", IrCode.Bge_Un, FlowControl.Cond_Branch, OpCodes.Bge_Un);
		public static readonly IrOpCode Bgt_Un = new IrOpCode("bgt.un", IrCode.Bgt_Un, FlowControl.Cond_Branch, OpCodes.Bgt_Un);
		public static readonly IrOpCode Ble_Un = new IrOpCode("ble.un", IrCode.Ble_Un, FlowControl.Cond_Branch, OpCodes.Ble_Un);
		public static readonly IrOpCode Blt_Un = new IrOpCode("blt.un", IrCode.Blt_Un, FlowControl.Cond_Branch, OpCodes.Blt_Un);
		public static readonly IrOpCode Switch = new IrOpCode("switch", IrCode.Switch, FlowControl.Cond_Branch, OpCodes.Switch);
		public static readonly IrOpCode Ldind_I1 = new IrOpCode("ldind.i1", IrCode.Ldind_I1, FlowControl.Next, OpCodes.Ldind_I1);
		public static readonly IrOpCode Ldind_U1 = new IrOpCode("ldind.u1", IrCode.Ldind_U1, FlowControl.Next, OpCodes.Ldind_U1);
		public static readonly IrOpCode Ldind_I2 = new IrOpCode("ldind.i2", IrCode.Ldind_I2, FlowControl.Next, OpCodes.Ldind_I2);
		public static readonly IrOpCode Ldind_U2 = new IrOpCode("ldind.u2", IrCode.Ldind_U2, FlowControl.Next, OpCodes.Ldind_U2);
		public static readonly IrOpCode Ldind_I4 = new IrOpCode("ldind.i4", IrCode.Ldind_I4, FlowControl.Next, OpCodes.Ldind_I4);
		public static readonly IrOpCode Ldind_U4 = new IrOpCode("ldind.u4", IrCode.Ldind_U4, FlowControl.Next, OpCodes.Ldind_U4);
		public static readonly IrOpCode Ldind_I8 = new IrOpCode("ldind.i8", IrCode.Ldind_I8, FlowControl.Next, OpCodes.Ldind_I8);
		public static readonly IrOpCode Ldind_I = new IrOpCode("ldind.i", IrCode.Ldind_I, FlowControl.Next, OpCodes.Ldind_I);
		public static readonly IrOpCode Ldind_R4 = new IrOpCode("ldind.r4", IrCode.Ldind_R4, FlowControl.Next, OpCodes.Ldind_R4);
		public static readonly IrOpCode Ldind_R8 = new IrOpCode("ldind.r8", IrCode.Ldind_R8, FlowControl.Next, OpCodes.Ldind_R8);
		public static readonly IrOpCode Ldind_Ref = new IrOpCode("ldind.ref", IrCode.Ldind_Ref, FlowControl.Next, OpCodes.Ldind_Ref);
		public static readonly IrOpCode Stind_Ref = new IrOpCode("stind.ref", IrCode.Stind_Ref, FlowControl.Next, OpCodes.Stind_Ref);
		public static readonly IrOpCode Stind_I1 = new IrOpCode("stind.i1", IrCode.Stind_I1, FlowControl.Next, OpCodes.Stind_I1);
		public static readonly IrOpCode Stind_I2 = new IrOpCode("stind.i2", IrCode.Stind_I2, FlowControl.Next, OpCodes.Stind_I2);
		public static readonly IrOpCode Stind_I4 = new IrOpCode("stind.i4", IrCode.Stind_I4, FlowControl.Next, OpCodes.Stind_I4);
		public static readonly IrOpCode Stind_I8 = new IrOpCode("stind.i8", IrCode.Stind_I8, FlowControl.Next, OpCodes.Stind_I8);
		public static readonly IrOpCode Stind_R4 = new IrOpCode("stind.r4", IrCode.Stind_R4, FlowControl.Next, OpCodes.Stind_R4);
		public static readonly IrOpCode Stind_R8 = new IrOpCode("stind.r8", IrCode.Stind_R8, FlowControl.Next, OpCodes.Stind_R8);
		public static readonly IrOpCode Add = new IrOpCode("add", IrCode.Add, FlowControl.Next, OpCodes.Add);
		public static readonly IrOpCode Sub = new IrOpCode("sub", IrCode.Sub, FlowControl.Next, OpCodes.Sub);
		public static readonly IrOpCode Mul = new IrOpCode("mul", IrCode.Mul, FlowControl.Next, OpCodes.Mul);
		public static readonly IrOpCode Div = new IrOpCode("div", IrCode.Div, FlowControl.Next, OpCodes.Div);
		public static readonly IrOpCode Div_Un = new IrOpCode("div.un", IrCode.Div_Un, FlowControl.Next, OpCodes.Div_Un);
		public static readonly IrOpCode Rem = new IrOpCode("rem", IrCode.Rem, FlowControl.Next, OpCodes.Rem);
		public static readonly IrOpCode Rem_Un = new IrOpCode("rem.un", IrCode.Rem_Un, FlowControl.Next, OpCodes.Rem_Un);
		public static readonly IrOpCode And = new IrOpCode("and", IrCode.And, FlowControl.Next, OpCodes.And);
		public static readonly IrOpCode Or = new IrOpCode("or", IrCode.Or, FlowControl.Next, OpCodes.Or);
		public static readonly IrOpCode Xor = new IrOpCode("xor", IrCode.Xor, FlowControl.Next, OpCodes.Xor);
		public static readonly IrOpCode Shl = new IrOpCode("shl", IrCode.Shl, FlowControl.Next, OpCodes.Shl);
		public static readonly IrOpCode Shr = new IrOpCode("shr", IrCode.Shr, FlowControl.Next, OpCodes.Shr);
		public static readonly IrOpCode Shr_Un = new IrOpCode("shr.un", IrCode.Shr_Un, FlowControl.Next, OpCodes.Shr_Un);
		public static readonly IrOpCode Neg = new IrOpCode("neg", IrCode.Neg, FlowControl.Next, OpCodes.Neg);
		public static readonly IrOpCode Not = new IrOpCode("not", IrCode.Not, FlowControl.Next, OpCodes.Not);
		public static readonly IrOpCode Conv_I1 = new IrOpCode("conv.i1", IrCode.Conv_I1, FlowControl.Next, OpCodes.Conv_I1);
		public static readonly IrOpCode Conv_I2 = new IrOpCode("conv.i2", IrCode.Conv_I2, FlowControl.Next, OpCodes.Conv_I2);
		public static readonly IrOpCode Conv_I4 = new IrOpCode("conv.i4", IrCode.Conv_I4, FlowControl.Next, OpCodes.Conv_I4);
		public static readonly IrOpCode Conv_I8 = new IrOpCode("conv.i8", IrCode.Conv_I8, FlowControl.Next, OpCodes.Conv_I8);
		public static readonly IrOpCode Conv_R4 = new IrOpCode("conv.r4", IrCode.Conv_R4, FlowControl.Next, OpCodes.Conv_R4);
		public static readonly IrOpCode Conv_R8 = new IrOpCode("conv.r8", IrCode.Conv_R8, FlowControl.Next, OpCodes.Conv_R8);
		public static readonly IrOpCode Conv_U4 = new IrOpCode("conv.u4", IrCode.Conv_U4, FlowControl.Next, OpCodes.Conv_U4);
		public static readonly IrOpCode Conv_U8 = new IrOpCode("conv.u8", IrCode.Conv_U8, FlowControl.Next, OpCodes.Conv_U8);
		public static readonly IrOpCode Callvirt = new IrOpCode("callvirt", IrCode.Callvirt, FlowControl.Call, OpCodes.Callvirt);
		public static readonly IrOpCode Cpobj = new IrOpCode("cpobj", IrCode.Cpobj, FlowControl.Next, OpCodes.Cpobj);
		public static readonly IrOpCode Ldobj = new IrOpCode("ldobj", IrCode.Ldobj, FlowControl.Next, OpCodes.Ldobj);
		public static readonly IrOpCode Ldstr = new IrOpCode("ldstr", IrCode.Ldstr, FlowControl.Next, OpCodes.Ldstr);
		public static readonly IrOpCode Newobj = new IrOpCode("newobj", IrCode.Newobj, FlowControl.Call, OpCodes.Newobj);
		public static readonly IrOpCode Castclass = new IrOpCode("castclass", IrCode.Castclass, FlowControl.Next, OpCodes.Castclass);
		public static readonly IrOpCode Isinst = new IrOpCode("isinst", IrCode.Isinst, FlowControl.Next, OpCodes.Isinst);
		public static readonly IrOpCode Conv_R_Un = new IrOpCode("conv.r.un", IrCode.Conv_R_Un, FlowControl.Next, OpCodes.Conv_R_Un);
		public static readonly IrOpCode Unbox = new IrOpCode("unbox", IrCode.Unbox, FlowControl.Next, OpCodes.Unbox);
		public static readonly IrOpCode Throw = new IrOpCode("throw", IrCode.Throw, FlowControl.Throw, OpCodes.Throw);
		public static readonly IrOpCode Ldfld = new IrOpCode("ldfld", IrCode.Ldfld, FlowControl.Next, OpCodes.Ldfld);
		public static readonly IrOpCode Ldflda = new IrOpCode("ldflda", IrCode.Ldflda, FlowControl.Next, OpCodes.Ldflda);
		public static readonly IrOpCode Stfld = new IrOpCode("stfld", IrCode.Stfld, FlowControl.Next, OpCodes.Stfld);
		public static readonly IrOpCode Ldsfld = new IrOpCode("ldsfld", IrCode.Ldsfld, FlowControl.Next, OpCodes.Ldsfld);
		public static readonly IrOpCode Ldsflda = new IrOpCode("ldsflda", IrCode.Ldsflda, FlowControl.Next, OpCodes.Ldsflda);
		public static readonly IrOpCode Stsfld = new IrOpCode("stsfld", IrCode.Stsfld, FlowControl.Next, OpCodes.Stsfld);
		public static readonly IrOpCode Stobj = new IrOpCode("stobj", IrCode.Stobj, FlowControl.Next, OpCodes.Stobj);
		public static readonly IrOpCode Conv_Ovf_I1_Un = new IrOpCode("conv.ovf.i1.un", IrCode.Conv_Ovf_I1_Un, FlowControl.Next, OpCodes.Conv_Ovf_I1_Un);
		public static readonly IrOpCode Conv_Ovf_I2_Un = new IrOpCode("conv.ovf.i2.un", IrCode.Conv_Ovf_I2_Un, FlowControl.Next, OpCodes.Conv_Ovf_I2_Un);
		public static readonly IrOpCode Conv_Ovf_I4_Un = new IrOpCode("conv.ovf.i4.un", IrCode.Conv_Ovf_I4_Un, FlowControl.Next, OpCodes.Conv_Ovf_I4_Un);
		public static readonly IrOpCode Conv_Ovf_I8_Un = new IrOpCode("conv.ovf.i8.un", IrCode.Conv_Ovf_I8_Un, FlowControl.Next, OpCodes.Conv_Ovf_I8_Un);
		public static readonly IrOpCode Conv_Ovf_U1_Un = new IrOpCode("conv.ovf.u1.un", IrCode.Conv_Ovf_U1_Un, FlowControl.Next, OpCodes.Conv_Ovf_U1_Un);
		public static readonly IrOpCode Conv_Ovf_U2_Un = new IrOpCode("conv.ovf.u2.un", IrCode.Conv_Ovf_U2_Un, FlowControl.Next, OpCodes.Conv_Ovf_U2_Un);
		public static readonly IrOpCode Conv_Ovf_U4_Un = new IrOpCode("conv.ovf.u4.un", IrCode.Conv_Ovf_U4_Un, FlowControl.Next, OpCodes.Conv_Ovf_U4_Un);
		public static readonly IrOpCode Conv_Ovf_U8_Un = new IrOpCode("conv.ovf.u8.un", IrCode.Conv_Ovf_U8_Un, FlowControl.Next, OpCodes.Conv_Ovf_U8_Un);
		public static readonly IrOpCode Conv_Ovf_I_Un = new IrOpCode("conv.ovf.i.un", IrCode.Conv_Ovf_I_Un, FlowControl.Next, OpCodes.Conv_Ovf_I_Un);
		public static readonly IrOpCode Conv_Ovf_U_Un = new IrOpCode("conv.ovf.u.un", IrCode.Conv_Ovf_U_Un, FlowControl.Next, OpCodes.Conv_Ovf_U_Un);
		public static readonly IrOpCode Box = new IrOpCode("box", IrCode.Box, FlowControl.Next, OpCodes.Box);
		public static readonly IrOpCode Newarr = new IrOpCode("newarr", IrCode.Newarr, FlowControl.Next, OpCodes.Newarr);
		public static readonly IrOpCode Ldlen = new IrOpCode("ldlen", IrCode.Ldlen, FlowControl.Next, OpCodes.Ldlen);
		public static readonly IrOpCode Ldelema = new IrOpCode("ldelema", IrCode.Ldelema, FlowControl.Next, OpCodes.Ldelema);
		public static readonly IrOpCode Ldelem_I1 = new IrOpCode("ldelem.i1", IrCode.Ldelem_I1, FlowControl.Next, OpCodes.Ldelem_I1);
		public static readonly IrOpCode Ldelem_U1 = new IrOpCode("ldelem.u1", IrCode.Ldelem_U1, FlowControl.Next, OpCodes.Ldelem_U1);
		public static readonly IrOpCode Ldelem_I2 = new IrOpCode("ldelem.i2", IrCode.Ldelem_I2, FlowControl.Next, OpCodes.Ldelem_I2);
		public static readonly IrOpCode Ldelem_U2 = new IrOpCode("ldelem.u2", IrCode.Ldelem_U2, FlowControl.Next, OpCodes.Ldelem_U2);
		public static readonly IrOpCode Ldelem_I4 = new IrOpCode("ldelem.i4", IrCode.Ldelem_I4, FlowControl.Next, OpCodes.Ldelem_I4);
		public static readonly IrOpCode Ldelem_U4 = new IrOpCode("ldelem.u4", IrCode.Ldelem_U4, FlowControl.Next, OpCodes.Ldelem_U4);
		public static readonly IrOpCode Ldelem_I8 = new IrOpCode("ldelem.i8", IrCode.Ldelem_I8, FlowControl.Next, OpCodes.Ldelem_I8);
		public static readonly IrOpCode Ldelem_I = new IrOpCode("ldelem.i", IrCode.Ldelem_I, FlowControl.Next, OpCodes.Ldelem_I);
		public static readonly IrOpCode Ldelem_R4 = new IrOpCode("ldelem.r4", IrCode.Ldelem_R4, FlowControl.Next, OpCodes.Ldelem_R4);
		public static readonly IrOpCode Ldelem_R8 = new IrOpCode("ldelem.r8", IrCode.Ldelem_R8, FlowControl.Next, OpCodes.Ldelem_R8);
		public static readonly IrOpCode Ldelem_Ref = new IrOpCode("ldelem.ref", IrCode.Ldelem_Ref, FlowControl.Next, OpCodes.Ldelem_Ref);
		public static readonly IrOpCode Stelem_I = new IrOpCode("stelem.i", IrCode.Stelem_I, FlowControl.Next, OpCodes.Stelem_I);
		public static readonly IrOpCode Stelem_I1 = new IrOpCode("stelem.i1", IrCode.Stelem_I1, FlowControl.Next, OpCodes.Stelem_I1);
		public static readonly IrOpCode Stelem_I2 = new IrOpCode("stelem.i2", IrCode.Stelem_I2, FlowControl.Next, OpCodes.Stelem_I2);
		public static readonly IrOpCode Stelem_I4 = new IrOpCode("stelem.i4", IrCode.Stelem_I4, FlowControl.Next, OpCodes.Stelem_I4);
		public static readonly IrOpCode Stelem_I8 = new IrOpCode("stelem.i8", IrCode.Stelem_I8, FlowControl.Next, OpCodes.Stelem_I8);
		public static readonly IrOpCode Stelem_R4 = new IrOpCode("stelem.r4", IrCode.Stelem_R4, FlowControl.Next, OpCodes.Stelem_R4);
		public static readonly IrOpCode Stelem_R8 = new IrOpCode("stelem.r8", IrCode.Stelem_R8, FlowControl.Next, OpCodes.Stelem_R8);
		public static readonly IrOpCode Stelem_Ref = new IrOpCode("stelem.ref", IrCode.Stelem_Ref, FlowControl.Next, OpCodes.Stelem_Ref);
		public static readonly IrOpCode Ldelem = new IrOpCode("ldelem", IrCode.Ldelem, FlowControl.Next, OpCodes.Ldelem);
		public static readonly IrOpCode Stelem = new IrOpCode("stelem", IrCode.Stelem, FlowControl.Next, OpCodes.Stelem);
		public static readonly IrOpCode Unbox_Any = new IrOpCode("unbox.any", IrCode.Unbox_Any, FlowControl.Next, OpCodes.Unbox_Any);
		public static readonly IrOpCode Conv_Ovf_I1 = new IrOpCode("conv.ovf.i1", IrCode.Conv_Ovf_I1, FlowControl.Next, OpCodes.Conv_Ovf_I1);
		public static readonly IrOpCode Conv_Ovf_U1 = new IrOpCode("conv.ovf.u1", IrCode.Conv_Ovf_U1, FlowControl.Next, OpCodes.Conv_Ovf_U1);
		public static readonly IrOpCode Conv_Ovf_I2 = new IrOpCode("conv.ovf.i2", IrCode.Conv_Ovf_I2, FlowControl.Next, OpCodes.Conv_Ovf_I2);
		public static readonly IrOpCode Conv_Ovf_U2 = new IrOpCode("conv.ovf.u2", IrCode.Conv_Ovf_U2, FlowControl.Next, OpCodes.Conv_Ovf_U2);
		public static readonly IrOpCode Conv_Ovf_I4 = new IrOpCode("conv.ovf.i4", IrCode.Conv_Ovf_I4, FlowControl.Next, OpCodes.Conv_Ovf_I4);
		public static readonly IrOpCode Conv_Ovf_U4 = new IrOpCode("conv.ovf.u4", IrCode.Conv_Ovf_U4, FlowControl.Next, OpCodes.Conv_Ovf_U4);
		public static readonly IrOpCode Conv_Ovf_I8 = new IrOpCode("conv.ovf.i8", IrCode.Conv_Ovf_I8, FlowControl.Next, OpCodes.Conv_Ovf_I8);
		public static readonly IrOpCode Conv_Ovf_U8 = new IrOpCode("conv.ovf.u8", IrCode.Conv_Ovf_U8, FlowControl.Next, OpCodes.Conv_Ovf_U8);
		public static readonly IrOpCode Refanyval = new IrOpCode("refanyval", IrCode.Refanyval, FlowControl.Next, OpCodes.Refanyval);
		public static readonly IrOpCode Ckfinite = new IrOpCode("ckfinite", IrCode.Ckfinite, FlowControl.Next, OpCodes.Ckfinite);
		public static readonly IrOpCode Mkrefany = new IrOpCode("mkrefany", IrCode.Mkrefany, FlowControl.Next, OpCodes.Mkrefany);
		public static readonly IrOpCode Ldtoken = new IrOpCode("ldtoken", IrCode.Ldtoken, FlowControl.Next, OpCodes.Ldtoken);
		public static readonly IrOpCode Conv_U2 = new IrOpCode("conv.u2", IrCode.Conv_U2, FlowControl.Next, OpCodes.Conv_U2);
		public static readonly IrOpCode Conv_U1 = new IrOpCode("conv.u1", IrCode.Conv_U1, FlowControl.Next, OpCodes.Conv_U1);
		public static readonly IrOpCode Conv_I = new IrOpCode("conv.i", IrCode.Conv_I, FlowControl.Next, OpCodes.Conv_I);
		public static readonly IrOpCode Conv_Ovf_I = new IrOpCode("conv.ovf.i", IrCode.Conv_Ovf_I, FlowControl.Next, OpCodes.Conv_Ovf_I);
		public static readonly IrOpCode Conv_Ovf_U = new IrOpCode("conv.ovf.u", IrCode.Conv_Ovf_U, FlowControl.Next, OpCodes.Conv_Ovf_U);
		public static readonly IrOpCode Add_Ovf = new IrOpCode("add.ovf", IrCode.Add_Ovf, FlowControl.Next, OpCodes.Add_Ovf);
		public static readonly IrOpCode Add_Ovf_Un = new IrOpCode("add.ovf.un", IrCode.Add_Ovf_Un, FlowControl.Next, OpCodes.Add_Ovf_Un);
		public static readonly IrOpCode Mul_Ovf = new IrOpCode("mul.ovf", IrCode.Mul_Ovf, FlowControl.Next, OpCodes.Mul_Ovf);
		public static readonly IrOpCode Mul_Ovf_Un = new IrOpCode("mul.ovf.un", IrCode.Mul_Ovf_Un, FlowControl.Next, OpCodes.Mul_Ovf_Un);
		public static readonly IrOpCode Sub_Ovf = new IrOpCode("sub.ovf", IrCode.Sub_Ovf, FlowControl.Next, OpCodes.Sub_Ovf);
		public static readonly IrOpCode Sub_Ovf_Un = new IrOpCode("sub.ovf.un", IrCode.Sub_Ovf_Un, FlowControl.Next, OpCodes.Sub_Ovf_Un);
		public static readonly IrOpCode Endfinally = new IrOpCode("endfinally", IrCode.Endfinally, FlowControl.Return, OpCodes.Endfinally);
		public static readonly IrOpCode Leave = new IrOpCode("leave", IrCode.Leave, FlowControl.Branch, OpCodes.Leave);
		public static readonly IrOpCode Leave_S = new IrOpCode("leave.s", IrCode.Leave_S, FlowControl.Branch, OpCodes.Leave_S);
		public static readonly IrOpCode Stind_I = new IrOpCode("stind.i", IrCode.Stind_I, FlowControl.Next, OpCodes.Stind_I);
		public static readonly IrOpCode Conv_U = new IrOpCode("conv.u", IrCode.Conv_U, FlowControl.Next, OpCodes.Conv_U);
		public static readonly IrOpCode Prefix7 = new IrOpCode("prefix7", IrCode.Prefix7, FlowControl.Meta, OpCodes.Prefix7);
		public static readonly IrOpCode Prefix6 = new IrOpCode("prefix6", IrCode.Prefix6, FlowControl.Meta, OpCodes.Prefix6);
		public static readonly IrOpCode Prefix5 = new IrOpCode("prefix5", IrCode.Prefix5, FlowControl.Meta, OpCodes.Prefix5);
		public static readonly IrOpCode Prefix4 = new IrOpCode("prefix4", IrCode.Prefix4, FlowControl.Meta, OpCodes.Prefix4);
		public static readonly IrOpCode Prefix3 = new IrOpCode("prefix3", IrCode.Prefix3, FlowControl.Meta, OpCodes.Prefix3);
		public static readonly IrOpCode Prefix2 = new IrOpCode("prefix2", IrCode.Prefix2, FlowControl.Meta, OpCodes.Prefix2);
		public static readonly IrOpCode Prefix1 = new IrOpCode("prefix1", IrCode.Prefix1, FlowControl.Meta, OpCodes.Prefix1);
		public static readonly IrOpCode Prefixref = new IrOpCode("prefixref", IrCode.Prefixref, FlowControl.Meta, OpCodes.Prefixref);
		public static readonly IrOpCode Arglist = new IrOpCode("arglist", IrCode.Arglist, FlowControl.Next, OpCodes.Arglist);
		public static readonly IrOpCode Ceq = new IrOpCode("ceq", IrCode.Ceq, FlowControl.Next, OpCodes.Ceq);
		public static readonly IrOpCode Cgt = new IrOpCode("cgt", IrCode.Cgt, FlowControl.Next, OpCodes.Cgt);
		public static readonly IrOpCode Cgt_Un = new IrOpCode("cgt.un", IrCode.Cgt_Un, FlowControl.Next, OpCodes.Cgt_Un);
		public static readonly IrOpCode Clt = new IrOpCode("clt", IrCode.Clt, FlowControl.Next, OpCodes.Clt);
		public static readonly IrOpCode Clt_Un = new IrOpCode("clt.un", IrCode.Clt_Un, FlowControl.Next, OpCodes.Clt_Un);
		public static readonly IrOpCode Ldftn = new IrOpCode("ldftn", IrCode.Ldftn, FlowControl.Next, OpCodes.Ldftn);
		public static readonly IrOpCode Ldvirtftn = new IrOpCode("ldvirtftn", IrCode.Ldvirtftn, FlowControl.Next, OpCodes.Ldvirtftn);
		public static readonly IrOpCode Ldarg = new IrOpCode("ldarg", IrCode.Ldarg, FlowControl.Next, OpCodes.Ldarg);
		public static readonly IrOpCode Ldarga = new IrOpCode("ldarga", IrCode.Ldarga, FlowControl.Next, OpCodes.Ldarga);
		public static readonly IrOpCode Starg = new IrOpCode("starg", IrCode.Starg, FlowControl.Next, OpCodes.Starg);
		public static readonly IrOpCode Ldloc = new IrOpCode("ldloc", IrCode.Ldloc, FlowControl.Next, OpCodes.Ldloc);
		public static readonly IrOpCode Ldloca = new IrOpCode("ldloca", IrCode.Ldloca, FlowControl.Next, OpCodes.Ldloca);
		public static readonly IrOpCode Stloc = new IrOpCode("stloc", IrCode.Stloc, FlowControl.Next, OpCodes.Stloc);
		public static readonly IrOpCode Localloc = new IrOpCode("localloc", IrCode.Localloc, FlowControl.Next, OpCodes.Localloc);
		public static readonly IrOpCode Endfilter = new IrOpCode("endfilter", IrCode.Endfilter, FlowControl.Return, OpCodes.Endfilter);
		public static readonly IrOpCode Unaligned = new IrOpCode("unaligned.", IrCode.Unaligned, FlowControl.Meta, OpCodes.Unaligned);
		public static readonly IrOpCode Volatile = new IrOpCode("volatile.", IrCode.Volatile, FlowControl.Meta, OpCodes.Volatile);
		public static readonly IrOpCode Tailcall = new IrOpCode("tail.", IrCode.Tailcall, FlowControl.Meta, OpCodes.Tailcall);
		public static readonly IrOpCode Initobj = new IrOpCode("initobj", IrCode.Initobj, FlowControl.Next, OpCodes.Initobj);
		public static readonly IrOpCode Constrained = new IrOpCode("constrained.", IrCode.Constrained, FlowControl.Meta, OpCodes.Constrained);
		public static readonly IrOpCode Cpblk = new IrOpCode("cpblk", IrCode.Cpblk, FlowControl.Next, OpCodes.Cpblk);
		public static readonly IrOpCode Initblk = new IrOpCode("initblk", IrCode.Initblk, FlowControl.Next, OpCodes.Initblk);
		public static readonly IrOpCode Rethrow = new IrOpCode("rethrow", IrCode.Rethrow, FlowControl.Throw, OpCodes.Rethrow);
		public static readonly IrOpCode Sizeof = new IrOpCode("sizeof", IrCode.Sizeof, FlowControl.Next, OpCodes.Sizeof);
		public static readonly IrOpCode Refanytype = new IrOpCode("refanytype", IrCode.Refanytype, FlowControl.Next, OpCodes.Refanytype);
		public static readonly IrOpCode Readonly = new IrOpCode("readonly.", IrCode.Readonly, FlowControl.Meta, OpCodes.Readonly);
	}


	partial class IrOpCodes
	{
		/// <summary>
		/// This is a custom opcode that may be used with <see cref="MethodCallInstruction"/> to
		/// signal that the method is an intrinsic method.
		/// </summary>
		public static readonly IrOpCode IntrinsicCall = new IrOpCode("_intrinsic_call", IrCode.IntrinsicCall, FlowControl.Call, null);
		public static readonly IrOpCode IntrinsicNewObj = new IrOpCode("_intrinsic_newobj", IrCode.IntrinsicNewObj, FlowControl.Call, null);
		public static readonly IrOpCode SpuInstructionMethod = new IrOpCode("_spu_instruction_method", IrCode.SpuInstructionMethodCall, FlowControl.Call, null);
		public static readonly IrOpCode PpeCall = new IrOpCode("_ppe_call", IrCode.PpeCall, FlowControl.Call, null);
	}
}
